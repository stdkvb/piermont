/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-input-mask";
exports.ids = ["vendor-chunks/react-input-mask"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-input-mask/index.js":
/*!************************************************!*\
  !*** ./node_modules/react-input-mask/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable import/no-unresolved */\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./lib/react-input-mask.development.js */ \"(ssr)/./node_modules/react-input-mask/lib/react-input-mask.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5wdXQtbWFzay9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUsOEpBQWlFO0FBQ25FIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGllcm1vbnQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5wdXQtbWFzay9pbmRleC5qcz9lMzYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby11bnJlc29sdmVkICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9saWIvcmVhY3QtaW5wdXQtbWFzay5wcm9kdWN0aW9uLm1pbi5qc1wiKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vbGliL3JlYWN0LWlucHV0LW1hc2suZGV2ZWxvcG1lbnQuanNcIik7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-input-mask/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-input-mask/lib/react-input-mask.development.js":
/*!***************************************************************************!*\
  !*** ./node_modules/react-input-mask/lib/react-input-mask.development.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar React__default = _interopDefault(React);\nvar reactDom = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\nvar PropTypes = _interopDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar invariant = _interopDefault(__webpack_require__(/*! invariant */ \"(ssr)/./node_modules/invariant/invariant.js\"));\nvar warning = _interopDefault(__webpack_require__(/*! warning */ \"(ssr)/./node_modules/warning/warning.js\"));\n\nfunction _defaults2(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _defaults2(subClass, superClass);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction defer(fn) {\n  return requestAnimationFrame(fn);\n}\nfunction cancelDefer(deferId) {\n  cancelAnimationFrame(deferId);\n}\n\nfunction setInputSelection(input, start, end) {\n  if (end === undefined) {\n    end = start;\n  }\n\n  input.setSelectionRange(start, end);\n}\nfunction getInputSelection(input) {\n  var start = input.selectionStart;\n  var end = input.selectionEnd;\n  return {\n    start: start,\n    end: end,\n    length: end - start\n  };\n}\nfunction isInputFocused(input) {\n  var inputDocument = input.ownerDocument;\n  return inputDocument.hasFocus() && inputDocument.activeElement === input;\n}\n\n// Element's window may differ from the one within React instance\n// if element rendered within iframe.\n// See https://github.com/sanniassin/react-input-mask/issues/182\nfunction getElementDocument(element) {\n  return element == null ? void 0 : element.ownerDocument;\n}\nfunction getElementWindow(element) {\n  var _getElementDocument;\n\n  return (_getElementDocument = getElementDocument(element)) == null ? void 0 : _getElementDocument.defaultView;\n}\nfunction isDOMElement(element) {\n  var elementWindow = getElementWindow(element);\n  return !!elementWindow && element instanceof elementWindow.HTMLElement;\n}\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\nfunction findLastIndex(array, predicate) {\n  for (var i = array.length - 1; i >= 0; i--) {\n    var x = array[i];\n\n    if (predicate(x, i)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\nfunction repeat(string, n) {\n  if (n === void 0) {\n    n = 1;\n  }\n\n  var result = \"\";\n\n  for (var i = 0; i < n; i++) {\n    result += string;\n  }\n\n  return result;\n}\nfunction toString(value) {\n  return \"\" + value;\n}\n\nfunction useInputElement(inputRef) {\n  return React.useCallback(function () {\n    var input = inputRef.current;\n    var isDOMNode = typeof window !== \"undefined\" && isDOMElement(input); // workaround for react-test-renderer\n    // https://github.com/sanniassin/react-input-mask/issues/147\n\n    if (!input || !isDOMNode) {\n      return null;\n    }\n\n    if (input.nodeName !== \"INPUT\") {\n      input = input.querySelector(\"input\");\n    }\n\n    if (!input) {\n      throw new Error(\"react-input-mask: inputComponent doesn't contain input node\");\n    }\n\n    return input;\n  }, [inputRef]);\n}\n\nfunction useDeferLoop(callback) {\n  var deferIdRef = React.useRef(null);\n  var runLoop = React.useCallback(function () {\n    // If there are simulated focus events, runLoop could be\n    // called multiple times without blur or re-render\n    if (deferIdRef.current !== null) {\n      return;\n    }\n\n    function loop() {\n      callback();\n      deferIdRef.current = defer(loop);\n    }\n\n    loop();\n  }, [callback]);\n  var stopLoop = React.useCallback(function () {\n    cancelDefer(deferIdRef.current);\n    deferIdRef.current = null;\n  }, []);\n  React.useEffect(function () {\n    if (deferIdRef.current) {\n      stopLoop();\n      runLoop();\n    }\n  }, [runLoop, stopLoop]);\n  React.useEffect(cancelDefer, []);\n  return [runLoop, stopLoop];\n}\n\nfunction useSelection(inputRef, isMasked) {\n  var selectionRef = React.useRef({\n    start: null,\n    end: null\n  });\n  var getInputElement = useInputElement(inputRef);\n  var getSelection = React.useCallback(function () {\n    var input = getInputElement();\n    return getInputSelection(input);\n  }, [getInputElement]);\n  var getLastSelection = React.useCallback(function () {\n    return selectionRef.current;\n  }, []);\n  var setSelection = React.useCallback(function (selection) {\n    var input = getInputElement(); // Don't change selection on unfocused input\n    // because Safari sets focus on selection change (#154)\n\n    if (!input || !isInputFocused(input)) {\n      return;\n    }\n\n    setInputSelection(input, selection.start, selection.end); // Use actual selection in case the requested one was out of range\n\n    selectionRef.current = getSelection();\n  }, [getInputElement, getSelection]);\n  var selectionLoop = React.useCallback(function () {\n    selectionRef.current = getSelection();\n  }, [getSelection]);\n\n  var _useDeferLoop = useDeferLoop(selectionLoop),\n      runSelectionLoop = _useDeferLoop[0],\n      stopSelectionLoop = _useDeferLoop[1];\n\n  React.useLayoutEffect(function () {\n    if (!isMasked) {\n      return;\n    }\n\n    var input = getInputElement();\n    input.addEventListener(\"focus\", runSelectionLoop);\n    input.addEventListener(\"blur\", stopSelectionLoop);\n\n    if (isInputFocused(input)) {\n      runSelectionLoop();\n    }\n\n    return function () {\n      input.removeEventListener(\"focus\", runSelectionLoop);\n      input.removeEventListener(\"blur\", stopSelectionLoop);\n      stopSelectionLoop();\n    };\n  });\n  return {\n    getSelection: getSelection,\n    getLastSelection: getLastSelection,\n    setSelection: setSelection\n  };\n}\n\nfunction useValue(inputRef, initialValue) {\n  var getInputElement = useInputElement(inputRef);\n  var valueRef = React.useRef(initialValue);\n  var getValue = React.useCallback(function () {\n    var input = getInputElement();\n    return input.value;\n  }, [getInputElement]);\n  var getLastValue = React.useCallback(function () {\n    return valueRef.current;\n  }, []);\n  var setValue = React.useCallback(function (newValue) {\n    valueRef.current = newValue;\n    var input = getInputElement();\n\n    if (input) {\n      input.value = newValue;\n    }\n  }, [getInputElement]);\n  return {\n    getValue: getValue,\n    getLastValue: getLastValue,\n    setValue: setValue\n  };\n}\n\nfunction useInputState(initialValue, isMasked) {\n  var inputRef = React.useRef();\n\n  var _useSelection = useSelection(inputRef, isMasked),\n      getSelection = _useSelection.getSelection,\n      getLastSelection = _useSelection.getLastSelection,\n      setSelection = _useSelection.setSelection;\n\n  var _useValue = useValue(inputRef, initialValue),\n      getValue = _useValue.getValue,\n      getLastValue = _useValue.getLastValue,\n      setValue = _useValue.setValue;\n\n  function getLastInputState() {\n    return {\n      value: getLastValue(),\n      selection: getLastSelection()\n    };\n  }\n\n  function getInputState() {\n    return {\n      value: getValue(),\n      selection: getSelection()\n    };\n  }\n\n  function setInputState(_ref) {\n    var value = _ref.value,\n        selection = _ref.selection;\n    setValue(value);\n    setSelection(selection);\n  }\n\n  return {\n    inputRef: inputRef,\n    getInputState: getInputState,\n    getLastInputState: getLastInputState,\n    setInputState: setInputState\n  };\n}\nfunction usePrevious(value) {\n  var ref = React.useRef();\n  React.useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nvar CONTROLLED_PROPS = [\"disabled\", \"onBlur\", \"onChange\", \"onFocus\", \"onMouseDown\", \"readOnly\", \"value\"];\nvar defaultFormatChars = {\n  \"9\": /[0-9]/,\n  a: /[A-Za-z]/,\n  \"*\": /[A-Za-z0-9]/\n};\n\nfunction validateMaxLength(props) {\n   true ? warning(!props.maxLength || !props.mask, \"react-input-mask: maxLength property shouldn't be passed to the masked input. It breaks masking and unnecessary because length is limited by the mask length.\") : 0;\n}\nfunction validateMaskPlaceholder(props) {\n  var mask = props.mask,\n      maskPlaceholder = props.maskPlaceholder;\n  !(!mask || !maskPlaceholder || maskPlaceholder.length === 1 || maskPlaceholder.length === mask.length) ?  true ? invariant(false, \"react-input-mask: maskPlaceholder should either be a single character or have the same length as the mask:\\n\" + (\"mask: \" + mask + \"\\n\") + (\"maskPlaceholder: \" + maskPlaceholder)) : 0 : void 0;\n}\nfunction validateChildren(props, inputElement) {\n  var conflictProps = CONTROLLED_PROPS.filter(function (propId) {\n    return inputElement.props[propId] != null && inputElement.props[propId] !== props[propId];\n  });\n  !!conflictProps.length ?  true ? invariant(false, \"react-input-mask: the following props should be passed to the InputMask component, not to children: \" + conflictProps.join(\",\")) : 0 : void 0;\n}\n\nfunction parseMask (_ref) {\n  var mask = _ref.mask,\n      maskPlaceholder = _ref.maskPlaceholder;\n  var permanents = [];\n\n  if (!mask) {\n    return {\n      maskPlaceholder: null,\n      mask: null,\n      prefix: null,\n      lastEditablePosition: null,\n      permanents: []\n    };\n  }\n\n  if (typeof mask === \"string\") {\n    var isPermanent = false;\n    var parsedMaskString = \"\";\n    mask.split(\"\").forEach(function (character) {\n      if (!isPermanent && character === \"\\\\\") {\n        isPermanent = true;\n      } else {\n        if (isPermanent || !defaultFormatChars[character]) {\n          permanents.push(parsedMaskString.length);\n        }\n\n        parsedMaskString += character;\n        isPermanent = false;\n      }\n    });\n    mask = parsedMaskString.split(\"\").map(function (character, index) {\n      if (permanents.indexOf(index) === -1) {\n        return defaultFormatChars[character];\n      }\n\n      return character;\n    });\n  } else {\n    mask.forEach(function (character, index) {\n      if (typeof character === \"string\") {\n        permanents.push(index);\n      }\n    });\n  }\n\n  if (maskPlaceholder) {\n    if (maskPlaceholder.length === 1) {\n      maskPlaceholder = mask.map(function (character, index) {\n        if (permanents.indexOf(index) !== -1) {\n          return character;\n        }\n\n        return maskPlaceholder;\n      });\n    } else {\n      maskPlaceholder = maskPlaceholder.split(\"\");\n    }\n\n    permanents.forEach(function (position) {\n      maskPlaceholder[position] = mask[position];\n    });\n    maskPlaceholder = maskPlaceholder.join(\"\");\n  }\n\n  var prefix = permanents.filter(function (position, index) {\n    return position === index;\n  }).map(function (position) {\n    return mask[position];\n  }).join(\"\");\n  var lastEditablePosition = mask.length - 1;\n\n  while (permanents.indexOf(lastEditablePosition) !== -1) {\n    lastEditablePosition--;\n  }\n\n  return {\n    maskPlaceholder: maskPlaceholder,\n    prefix: prefix,\n    mask: mask,\n    lastEditablePosition: lastEditablePosition,\n    permanents: permanents\n  };\n}\n\n/* eslint no-use-before-define: [\"error\", { functions: false }] */\n\nvar MaskUtils = function MaskUtils(options) {\n  var _this = this;\n\n  this.isCharacterAllowedAtPosition = function (character, position) {\n    var maskPlaceholder = _this.maskOptions.maskPlaceholder;\n\n    if (_this.isCharacterFillingPosition(character, position)) {\n      return true;\n    }\n\n    if (!maskPlaceholder) {\n      return false;\n    }\n\n    return maskPlaceholder[position] === character;\n  };\n\n  this.isCharacterFillingPosition = function (character, position) {\n    var mask = _this.maskOptions.mask;\n\n    if (!character || position >= mask.length) {\n      return false;\n    }\n\n    if (!_this.isPositionEditable(position)) {\n      return mask[position] === character;\n    }\n\n    var charRule = mask[position];\n    return new RegExp(charRule).test(character);\n  };\n\n  this.isPositionEditable = function (position) {\n    var _this$maskOptions = _this.maskOptions,\n        mask = _this$maskOptions.mask,\n        permanents = _this$maskOptions.permanents;\n    return position < mask.length && permanents.indexOf(position) === -1;\n  };\n\n  this.isValueEmpty = function (value) {\n    return value.split(\"\").every(function (character, position) {\n      return !_this.isPositionEditable(position) || !_this.isCharacterFillingPosition(character, position);\n    });\n  };\n\n  this.isValueFilled = function (value) {\n    return _this.getFilledLength(value) === _this.maskOptions.lastEditablePosition + 1;\n  };\n\n  this.getDefaultSelectionForValue = function (value) {\n    var filledLength = _this.getFilledLength(value);\n\n    var cursorPosition = _this.getRightEditablePosition(filledLength);\n\n    return {\n      start: cursorPosition,\n      end: cursorPosition\n    };\n  };\n\n  this.getFilledLength = function (value) {\n    var characters = value.split(\"\");\n    var lastFilledIndex = findLastIndex(characters, function (character, position) {\n      return _this.isPositionEditable(position) && _this.isCharacterFillingPosition(character, position);\n    });\n    return lastFilledIndex + 1;\n  };\n\n  this.getStringFillingLengthAtPosition = function (string, position) {\n    var characters = string.split(\"\");\n    var insertedValue = characters.reduce(function (value, character) {\n      return _this.insertCharacterAtPosition(value, character, value.length);\n    }, repeat(\" \", position));\n    return insertedValue.length - position;\n  };\n\n  this.getLeftEditablePosition = function (position) {\n    for (var i = position; i >= 0; i--) {\n      if (_this.isPositionEditable(i)) {\n        return i;\n      }\n    }\n\n    return null;\n  };\n\n  this.getRightEditablePosition = function (position) {\n    var mask = _this.maskOptions.mask;\n\n    for (var i = position; i < mask.length; i++) {\n      if (_this.isPositionEditable(i)) {\n        return i;\n      }\n    }\n\n    return null;\n  };\n\n  this.formatValue = function (value) {\n    var _this$maskOptions2 = _this.maskOptions,\n        maskPlaceholder = _this$maskOptions2.maskPlaceholder,\n        mask = _this$maskOptions2.mask;\n\n    if (!maskPlaceholder) {\n      value = _this.insertStringAtPosition(\"\", value, 0);\n\n      while (value.length < mask.length && !_this.isPositionEditable(value.length)) {\n        value += mask[value.length];\n      }\n\n      return value;\n    }\n\n    return _this.insertStringAtPosition(maskPlaceholder, value, 0);\n  };\n\n  this.clearRange = function (value, start, len) {\n    if (!len) {\n      return value;\n    }\n\n    var end = start + len;\n    var _this$maskOptions3 = _this.maskOptions,\n        maskPlaceholder = _this$maskOptions3.maskPlaceholder,\n        mask = _this$maskOptions3.mask;\n    var clearedValue = value.split(\"\").map(function (character, i) {\n      var isEditable = _this.isPositionEditable(i);\n\n      if (!maskPlaceholder && i >= end && !isEditable) {\n        return \"\";\n      }\n\n      if (i < start || i >= end) {\n        return character;\n      }\n\n      if (!isEditable) {\n        return mask[i];\n      }\n\n      if (maskPlaceholder) {\n        return maskPlaceholder[i];\n      }\n\n      return \"\";\n    }).join(\"\");\n    return _this.formatValue(clearedValue);\n  };\n\n  this.insertCharacterAtPosition = function (value, character, position) {\n    var _this$maskOptions4 = _this.maskOptions,\n        mask = _this$maskOptions4.mask,\n        maskPlaceholder = _this$maskOptions4.maskPlaceholder;\n\n    if (position >= mask.length) {\n      return value;\n    }\n\n    var isAllowed = _this.isCharacterAllowedAtPosition(character, position);\n\n    var isEditable = _this.isPositionEditable(position);\n\n    var nextEditablePosition = _this.getRightEditablePosition(position);\n\n    var isNextPlaceholder = maskPlaceholder && nextEditablePosition ? character === maskPlaceholder[nextEditablePosition] : null;\n    var valueBefore = value.slice(0, position);\n\n    if (isAllowed || !isEditable) {\n      var insertedCharacter = isAllowed ? character : mask[position];\n      value = valueBefore + insertedCharacter;\n    }\n\n    if (!isAllowed && !isEditable && !isNextPlaceholder) {\n      value = _this.insertCharacterAtPosition(value, character, position + 1);\n    }\n\n    return value;\n  };\n\n  this.insertStringAtPosition = function (value, string, position) {\n    var _this$maskOptions5 = _this.maskOptions,\n        mask = _this$maskOptions5.mask,\n        maskPlaceholder = _this$maskOptions5.maskPlaceholder;\n\n    if (!string || position >= mask.length) {\n      return value;\n    }\n\n    var characters = string.split(\"\");\n    var isFixedLength = _this.isValueFilled(value) || !!maskPlaceholder;\n    var valueAfter = value.slice(position);\n    value = characters.reduce(function (value, character) {\n      return _this.insertCharacterAtPosition(value, character, value.length);\n    }, value.slice(0, position));\n\n    if (isFixedLength) {\n      value += valueAfter.slice(value.length - position);\n    } else if (_this.isValueFilled(value)) {\n      value += mask.slice(value.length).join(\"\");\n    } else {\n      var editableCharactersAfter = valueAfter.split(\"\").filter(function (character, i) {\n        return _this.isPositionEditable(position + i);\n      });\n      value = editableCharactersAfter.reduce(function (value, character) {\n        var nextEditablePosition = _this.getRightEditablePosition(value.length);\n\n        if (nextEditablePosition === null) {\n          return value;\n        }\n\n        if (!_this.isPositionEditable(value.length)) {\n          value += mask.slice(value.length, nextEditablePosition).join(\"\");\n        }\n\n        return _this.insertCharacterAtPosition(value, character, value.length);\n      }, value);\n    }\n\n    return value;\n  };\n\n  this.processChange = function (currentState, previousState) {\n    var _this$maskOptions6 = _this.maskOptions,\n        mask = _this$maskOptions6.mask,\n        prefix = _this$maskOptions6.prefix,\n        lastEditablePosition = _this$maskOptions6.lastEditablePosition;\n    var value = currentState.value,\n        selection = currentState.selection;\n    var previousValue = previousState.value;\n    var previousSelection = previousState.selection;\n    var newValue = value;\n    var enteredString = \"\";\n    var formattedEnteredStringLength = 0;\n    var removedLength = 0;\n    var cursorPosition = Math.min(previousSelection.start, selection.start);\n\n    if (selection.end > previousSelection.start) {\n      enteredString = newValue.slice(previousSelection.start, selection.end);\n      formattedEnteredStringLength = _this.getStringFillingLengthAtPosition(enteredString, cursorPosition);\n\n      if (!formattedEnteredStringLength) {\n        removedLength = 0;\n      } else {\n        removedLength = previousSelection.length;\n      }\n    } else if (newValue.length < previousValue.length) {\n      removedLength = previousValue.length - newValue.length;\n    }\n\n    newValue = previousValue;\n\n    if (removedLength) {\n      if (removedLength === 1 && !previousSelection.length) {\n        var deleteFromRight = previousSelection.start === selection.start;\n        cursorPosition = deleteFromRight ? _this.getRightEditablePosition(selection.start) : _this.getLeftEditablePosition(selection.start);\n      }\n\n      newValue = _this.clearRange(newValue, cursorPosition, removedLength);\n    }\n\n    newValue = _this.insertStringAtPosition(newValue, enteredString, cursorPosition);\n    cursorPosition += formattedEnteredStringLength;\n\n    if (cursorPosition >= mask.length) {\n      cursorPosition = mask.length;\n    } else if (cursorPosition < prefix.length && !formattedEnteredStringLength) {\n      cursorPosition = prefix.length;\n    } else if (cursorPosition >= prefix.length && cursorPosition < lastEditablePosition && formattedEnteredStringLength) {\n      cursorPosition = _this.getRightEditablePosition(cursorPosition);\n    }\n\n    newValue = _this.formatValue(newValue);\n    return {\n      value: newValue,\n      enteredString: enteredString,\n      selection: {\n        start: cursorPosition,\n        end: cursorPosition\n      }\n    };\n  };\n\n  this.maskOptions = parseMask(options);\n};\n\nvar InputMaskChildrenWrapper =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(InputMaskChildrenWrapper, _React$Component);\n\n  function InputMaskChildrenWrapper() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = InputMaskChildrenWrapper.prototype;\n\n  _proto.render = function render() {\n    // eslint-disable-next-line react/prop-types\n    var _this$props = this.props,\n        children = _this$props.children,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"children\"]);\n\n    return React__default.cloneElement(children, props);\n  };\n\n  return InputMaskChildrenWrapper;\n}(React__default.Component);\n\nvar InputMask = React.forwardRef(function InputMask(props, forwardedRef) {\n  var alwaysShowMask = props.alwaysShowMask,\n      children = props.children,\n      mask = props.mask,\n      maskPlaceholder = props.maskPlaceholder,\n      beforeMaskedStateChange = props.beforeMaskedStateChange,\n      restProps = _objectWithoutPropertiesLoose(props, [\"alwaysShowMask\", \"children\", \"mask\", \"maskPlaceholder\", \"beforeMaskedStateChange\"]);\n\n  validateMaxLength(props);\n  validateMaskPlaceholder(props);\n  var maskUtils = new MaskUtils({\n    mask: mask,\n    maskPlaceholder: maskPlaceholder\n  });\n  var isMasked = !!mask;\n  var isEditable = !restProps.disabled && !restProps.readOnly;\n  var isControlled = props.value !== null && props.value !== undefined;\n  var previousIsMasked = usePrevious(isMasked);\n  var initialValue = toString((isControlled ? props.value : props.defaultValue) || \"\");\n\n  var _useInputState = useInputState(initialValue, isMasked),\n      inputRef = _useInputState.inputRef,\n      getInputState = _useInputState.getInputState,\n      setInputState = _useInputState.setInputState,\n      getLastInputState = _useInputState.getLastInputState;\n\n  var getInputElement = useInputElement(inputRef);\n\n  function onChange(event) {\n    var currentState = getInputState();\n    var previousState = getLastInputState();\n    var newInputState = maskUtils.processChange(currentState, previousState);\n\n    if (beforeMaskedStateChange) {\n      newInputState = beforeMaskedStateChange({\n        currentState: currentState,\n        previousState: previousState,\n        nextState: newInputState\n      });\n    }\n\n    setInputState(newInputState);\n\n    if (props.onChange) {\n      props.onChange(event);\n    }\n  }\n\n  function onFocus(event) {\n    // If autoFocus property is set, focus event fires before the ref handler gets called\n    inputRef.current = event.target;\n    var currentValue = getInputState().value;\n\n    if (isMasked && !maskUtils.isValueFilled(currentValue)) {\n      var newValue = maskUtils.formatValue(currentValue);\n      var newSelection = maskUtils.getDefaultSelectionForValue(newValue);\n      var newInputState = {\n        value: newValue,\n        selection: newSelection\n      };\n\n      if (beforeMaskedStateChange) {\n        newInputState = beforeMaskedStateChange({\n          currentState: getInputState(),\n          nextState: newInputState\n        });\n        newValue = newInputState.value;\n        newSelection = newInputState.selection;\n      }\n\n      setInputState(newInputState);\n\n      if (newValue !== currentValue && props.onChange) {\n        props.onChange(event);\n      } // Chrome resets selection after focus event,\n      // so we want to restore it later\n\n\n      defer(function () {\n        setInputState(getLastInputState());\n      });\n    }\n\n    if (props.onFocus) {\n      props.onFocus(event);\n    }\n  }\n\n  function onBlur(event) {\n    var currentValue = getInputState().value;\n    var lastValue = getLastInputState().value;\n\n    if (isMasked && !alwaysShowMask && maskUtils.isValueEmpty(lastValue)) {\n      var newValue = \"\";\n      var newInputState = {\n        value: newValue,\n        selection: {\n          start: null,\n          end: null\n        }\n      };\n\n      if (beforeMaskedStateChange) {\n        newInputState = beforeMaskedStateChange({\n          currentState: getInputState(),\n          nextState: newInputState\n        });\n        newValue = newInputState.value;\n      }\n\n      setInputState(newInputState);\n\n      if (newValue !== currentValue && props.onChange) {\n        props.onChange(event);\n      }\n    }\n\n    if (props.onBlur) {\n      props.onBlur(event);\n    }\n  } // Tiny unintentional mouse movements can break cursor\n  // position on focus, so we have to restore it in that case\n  //\n  // https://github.com/sanniassin/react-input-mask/issues/108\n\n\n  function onMouseDown(event) {\n    var input = getInputElement();\n\n    var _getInputState = getInputState(),\n        value = _getInputState.value;\n\n    var inputDocument = getElementDocument(input);\n\n    if (!isInputFocused(input) && !maskUtils.isValueFilled(value)) {\n      var mouseDownX = event.clientX;\n      var mouseDownY = event.clientY;\n      var mouseDownTime = new Date().getTime();\n\n      var mouseUpHandler = function mouseUpHandler(mouseUpEvent) {\n        inputDocument.removeEventListener(\"mouseup\", mouseUpHandler);\n\n        if (!isInputFocused(input)) {\n          return;\n        }\n\n        var deltaX = Math.abs(mouseUpEvent.clientX - mouseDownX);\n        var deltaY = Math.abs(mouseUpEvent.clientY - mouseDownY);\n        var axisDelta = Math.max(deltaX, deltaY);\n        var timeDelta = new Date().getTime() - mouseDownTime;\n\n        if (axisDelta <= 10 && timeDelta <= 200 || axisDelta <= 5 && timeDelta <= 300) {\n          var _lastState = getLastInputState();\n\n          var newSelection = maskUtils.getDefaultSelectionForValue(_lastState.value);\n\n          var newState = _extends({}, _lastState, {\n            selection: newSelection\n          });\n\n          setInputState(newState);\n        }\n      };\n\n      inputDocument.addEventListener(\"mouseup\", mouseUpHandler);\n    }\n\n    if (props.onMouseDown) {\n      props.onMouseDown(event);\n    }\n  } // For controlled inputs we want to provide properly formatted\n  // value prop\n\n\n  if (isMasked && isControlled) {\n    var input = getInputElement();\n    var isFocused = input && isInputFocused(input);\n    var newValue = isFocused || alwaysShowMask || props.value ? maskUtils.formatValue(props.value) : props.value;\n\n    if (beforeMaskedStateChange) {\n      newValue = beforeMaskedStateChange({\n        nextState: {\n          value: newValue,\n          selection: {\n            start: null,\n            end: null\n          }\n        }\n      }).value;\n    }\n\n    setInputState(_extends({}, getLastInputState(), {\n      value: newValue\n    }));\n  }\n\n  var lastState = getLastInputState();\n  var lastSelection = lastState.selection;\n  var lastValue = lastState.value;\n  React.useLayoutEffect(function () {\n    if (!isMasked) {\n      return;\n    }\n\n    var input = getInputElement();\n    var isFocused = isInputFocused(input);\n    var previousSelection = lastSelection;\n    var currentState = getInputState();\n\n    var newInputState = _extends({}, currentState); // Update value for uncontrolled inputs to make sure\n    // it's always in sync with mask props\n\n\n    if (!isControlled) {\n      var currentValue = currentState.value;\n      var formattedValue = maskUtils.formatValue(currentValue);\n      var isValueEmpty = maskUtils.isValueEmpty(formattedValue);\n      var shouldFormatValue = !isValueEmpty || isFocused || alwaysShowMask;\n\n      if (shouldFormatValue) {\n        newInputState.value = formattedValue;\n      } else if (isValueEmpty && !isFocused) {\n        newInputState.value = \"\";\n      }\n    }\n\n    if (isFocused && !previousIsMasked) {\n      // Adjust selection if input got masked while being focused\n      newInputState.selection = maskUtils.getDefaultSelectionForValue(newInputState.value);\n    } else if (isControlled && isFocused && previousSelection) {\n      // Restore cursor position if value has changed outside change event\n      if (previousSelection.start !== null && previousSelection.end !== null) {\n        newInputState.selection = previousSelection;\n      }\n    }\n\n    if (beforeMaskedStateChange) {\n      newInputState = beforeMaskedStateChange({\n        currentState: currentState,\n        nextState: newInputState\n      });\n    }\n\n    setInputState(newInputState);\n  });\n\n  var inputProps = _extends({}, restProps, {\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onChange: isMasked && isEditable ? onChange : props.onChange,\n    onMouseDown: isMasked && isEditable ? onMouseDown : props.onMouseDown,\n    ref: function ref(_ref) {\n      inputRef.current = reactDom.findDOMNode(_ref);\n\n      if (isFunction(forwardedRef)) {\n        forwardedRef(_ref);\n      } else if (forwardedRef !== null && typeof forwardedRef === \"object\") {\n        forwardedRef.current = _ref;\n      }\n    },\n    value: isMasked && isControlled ? lastValue : props.value\n  });\n\n  if (children) {\n    validateChildren(props, children); // We wrap children into a class component to be able to find\n    // their input element using findDOMNode\n\n    return React__default.createElement(InputMaskChildrenWrapper, inputProps, children);\n  }\n\n  return React__default.createElement(\"input\", inputProps);\n});\nInputMask.displayName = \"InputMask\";\nInputMask.defaultProps = {\n  alwaysShowMask: false,\n  maskPlaceholder: \"_\"\n};\nInputMask.propTypes = {\n  alwaysShowMask: PropTypes.bool,\n  beforeMaskedStateChange: PropTypes.func,\n  children: PropTypes.element,\n  mask: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp)]))]),\n  maskPlaceholder: PropTypes.string,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onMouseDown: PropTypes.func\n};\n\nmodule.exports = InputMask;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-input-mask/lib/react-input-mask.development.js\n");

/***/ })

};
;
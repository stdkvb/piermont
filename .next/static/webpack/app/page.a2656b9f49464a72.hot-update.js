/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FDetails.tsx%22%2C%22ids%22%3A%5B%22Details%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FExcursion.tsx%22%2C%22ids%22%3A%5B%22Excursion%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FLobby.tsx%22%2C%22ids%22%3A%5B%22Lobby%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FMainSlider.tsx%22%2C%22ids%22%3A%5B%22MainSlider%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FMenu.tsx%22%2C%22ids%22%3A%5B%22*%22%2C%22Menu%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FModal.tsx%22%2C%22ids%22%3A%5B%22Modal%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FPanorama.tsx%22%2C%22ids%22%3A%5B%22Panorama%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FResidence.tsx%22%2C%22ids%22%3A%5B%22Residence%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FSlider.tsx%22%2C%22ids%22%3A%5B%22Slider%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FUniqueFormats.tsx%22%2C%22ids%22%3A%5B%22UniqueFormats%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2Fcheckbox.tsx%22%2C%22ids%22%3A%5B%22Checkbox%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2Fdrawer.tsx%22%2C%22ids%22%3A%5B%22Drawer%22%2C%22DrawerPortal%22%2C%22DrawerOverlay%22%2C%22DrawerTrigger%22%2C%22DrawerClose%22%2C%22DrawerContent%22%2C%22DrawerHeader%22%2C%22DrawerFooter%22%2C%22DrawerTitle%22%2C%22DrawerDescription%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2Fform.tsx%22%2C%22ids%22%3A%5B%22useFormField%22%2C%22Form%22%2C%22FormItem%22%2C%22FormLabel%22%2C%22FormControl%22%2C%22FormDescription%22%2C%22FormMessage%22%2C%22FormField%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2FParallaxProvider.tsx%22%2C%22ids%22%3A%5B%22Parallax%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2Fseparator.tsx%22%2C%22ids%22%3A%5B%22Separator%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2Fsheet.tsx%22%2C%22ids%22%3A%5B%22Sheet%22%2C%22SheetPortal%22%2C%22SheetOverlay%22%2C%22SheetTrigger%22%2C%22SheetClose%22%2C%22SheetContent%22%2C%22SheetHeader%22%2C%22SheetFooter%22%2C%22SheetTitle%22%2C%22SheetDescription%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Flink.js%22%2C%22ids%22%3A%5B%22*%22%5D%7D&server=false!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FDetails.tsx%22%2C%22ids%22%3A%5B%22Details%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FExcursion.tsx%22%2C%22ids%22%3A%5B%22Excursion%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FLobby.tsx%22%2C%22ids%22%3A%5B%22Lobby%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FMainSlider.tsx%22%2C%22ids%22%3A%5B%22MainSlider%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FMenu.tsx%22%2C%22ids%22%3A%5B%22*%22%2C%22Menu%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FModal.tsx%22%2C%22ids%22%3A%5B%22Modal%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FPanorama.tsx%22%2C%22ids%22%3A%5B%22Panorama%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FResidence.tsx%22%2C%22ids%22%3A%5B%22Residence%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FSlider.tsx%22%2C%22ids%22%3A%5B%22Slider%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FUniqueFormats.tsx%22%2C%22ids%22%3A%5B%22UniqueFormats%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2Fcheckbox.tsx%22%2C%22ids%22%3A%5B%22Checkbox%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2Fdrawer.tsx%22%2C%22ids%22%3A%5B%22Drawer%22%2C%22DrawerPortal%22%2C%22DrawerOverlay%22%2C%22DrawerTrigger%22%2C%22DrawerClose%22%2C%22DrawerContent%22%2C%22DrawerHeader%22%2C%22DrawerFooter%22%2C%22DrawerTitle%22%2C%22DrawerDescription%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2Fform.tsx%22%2C%22ids%22%3A%5B%22useFormField%22%2C%22Form%22%2C%22FormItem%22%2C%22FormLabel%22%2C%22FormControl%22%2C%22FormDescription%22%2C%22FormMessage%22%2C%22FormField%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2FParallaxProvider.tsx%22%2C%22ids%22%3A%5B%22Parallax%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2Fseparator.tsx%22%2C%22ids%22%3A%5B%22Separator%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2Fsheet.tsx%22%2C%22ids%22%3A%5B%22Sheet%22%2C%22SheetPortal%22%2C%22SheetOverlay%22%2C%22SheetTrigger%22%2C%22SheetClose%22%2C%22SheetContent%22%2C%22SheetHeader%22%2C%22SheetFooter%22%2C%22SheetTitle%22%2C%22SheetDescription%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Flink.js%22%2C%22ids%22%3A%5B%22*%22%5D%7D&server=false! ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/shared/Details.tsx */ \"(app-pages-browser)/./components/shared/Details.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/shared/Excursion.tsx */ \"(app-pages-browser)/./components/shared/Excursion.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/shared/Lobby.tsx */ \"(app-pages-browser)/./components/shared/Lobby.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/shared/MainSlider.tsx */ \"(app-pages-browser)/./components/shared/MainSlider.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/shared/Menu.tsx */ \"(app-pages-browser)/./components/shared/Menu.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/shared/Modal.tsx */ \"(app-pages-browser)/./components/shared/Modal.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/shared/Panorama.tsx */ \"(app-pages-browser)/./components/shared/Panorama.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/shared/Residence.tsx */ \"(app-pages-browser)/./components/shared/Residence.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/shared/Slider.tsx */ \"(app-pages-browser)/./components/shared/Slider.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/shared/UniqueFormats.tsx */ \"(app-pages-browser)/./components/shared/UniqueFormats.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/ui/checkbox.tsx */ \"(app-pages-browser)/./components/ui/checkbox.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/ui/drawer.tsx */ \"(app-pages-browser)/./components/ui/drawer.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/ui/form.tsx */ \"(app-pages-browser)/./components/ui/form.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/ui/ParallaxProvider.tsx */ \"(app-pages-browser)/./components/ui/ParallaxProvider.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/ui/separator.tsx */ \"(app-pages-browser)/./components/ui/separator.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/ui/sheet.tsx */ \"(app-pages-browser)/./components/ui/sheet.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/link.js */ \"(app-pages-browser)/./node_modules/next/dist/client/link.js\", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FDetails.tsx%22%2C%22ids%22%3A%5B%22Details%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FExcursion.tsx%22%2C%22ids%22%3A%5B%22Excursion%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FLobby.tsx%22%2C%22ids%22%3A%5B%22Lobby%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FMainSlider.tsx%22%2C%22ids%22%3A%5B%22MainSlider%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FMenu.tsx%22%2C%22ids%22%3A%5B%22*%22%2C%22Menu%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FModal.tsx%22%2C%22ids%22%3A%5B%22Modal%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FPanorama.tsx%22%2C%22ids%22%3A%5B%22Panorama%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FResidence.tsx%22%2C%22ids%22%3A%5B%22Residence%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FSlider.tsx%22%2C%22ids%22%3A%5B%22Slider%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fshared%2FUniqueFormats.tsx%22%2C%22ids%22%3A%5B%22UniqueFormats%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2Fcheckbox.tsx%22%2C%22ids%22%3A%5B%22Checkbox%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2Fdrawer.tsx%22%2C%22ids%22%3A%5B%22Drawer%22%2C%22DrawerPortal%22%2C%22DrawerOverlay%22%2C%22DrawerTrigger%22%2C%22DrawerClose%22%2C%22DrawerContent%22%2C%22DrawerHeader%22%2C%22DrawerFooter%22%2C%22DrawerTitle%22%2C%22DrawerDescription%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2Fform.tsx%22%2C%22ids%22%3A%5B%22useFormField%22%2C%22Form%22%2C%22FormItem%22%2C%22FormLabel%22%2C%22FormControl%22%2C%22FormDescription%22%2C%22FormMessage%22%2C%22FormField%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2FParallaxProvider.tsx%22%2C%22ids%22%3A%5B%22Parallax%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2Fseparator.tsx%22%2C%22ids%22%3A%5B%22Separator%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fcomponents%2Fui%2Fsheet.tsx%22%2C%22ids%22%3A%5B%22Sheet%22%2C%22SheetPortal%22%2C%22SheetOverlay%22%2C%22SheetTrigger%22%2C%22SheetClose%22%2C%22SheetContent%22%2C%22SheetHeader%22%2C%22SheetFooter%22%2C%22SheetTitle%22%2C%22SheetDescription%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fbulatsitdikov%2Fdev%2Fpiermont%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Flink.js%22%2C%22ids%22%3A%5B%22*%22%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/ui/drawer.tsx":
/*!**********************************!*\
  !*** ./components/ui/drawer.tsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Drawer: function() { return /* binding */ Drawer; },\n/* harmony export */   DrawerClose: function() { return /* binding */ DrawerClose; },\n/* harmony export */   DrawerContent: function() { return /* binding */ DrawerContent; },\n/* harmony export */   DrawerDescription: function() { return /* binding */ DrawerDescription; },\n/* harmony export */   DrawerFooter: function() { return /* binding */ DrawerFooter; },\n/* harmony export */   DrawerHeader: function() { return /* binding */ DrawerHeader; },\n/* harmony export */   DrawerOverlay: function() { return /* binding */ DrawerOverlay; },\n/* harmony export */   DrawerPortal: function() { return /* binding */ DrawerPortal; },\n/* harmony export */   DrawerTitle: function() { return /* binding */ DrawerTitle; },\n/* harmony export */   DrawerTrigger: function() { return /* binding */ DrawerTrigger; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var vaul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vaul */ \"(app-pages-browser)/./node_modules/vaul/dist/index.mjs\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/utils */ \"(app-pages-browser)/./lib/utils.ts\");\n/* __next_internal_client_entry_do_not_use__ Drawer,DrawerPortal,DrawerOverlay,DrawerTrigger,DrawerClose,DrawerContent,DrawerHeader,DrawerFooter,DrawerTitle,DrawerDescription auto */ \n\n\n\nconst Drawer = (param)=>{\n    let { shouldScaleBackground = true, ...props } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(vaul__WEBPACK_IMPORTED_MODULE_2__.Drawer.Root, {\n        shouldScaleBackground: shouldScaleBackground,\n        ...props\n    }, void 0, false, {\n        fileName: \"/Users/bulatsitdikov/dev/piermont/components/ui/drawer.tsx\",\n        lineNumber: 12,\n        columnNumber: 3\n    }, undefined);\n};\n_c = Drawer;\nDrawer.displayName = \"Drawer\";\nconst DrawerTrigger = vaul__WEBPACK_IMPORTED_MODULE_2__.Drawer.Trigger;\nconst DrawerPortal = vaul__WEBPACK_IMPORTED_MODULE_2__.Drawer.Portal;\nconst DrawerClose = vaul__WEBPACK_IMPORTED_MODULE_2__.Drawer.Close;\nconst DrawerOverlay = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((param, ref)=>{\n    let { className, ...props } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(vaul__WEBPACK_IMPORTED_MODULE_2__.Drawer.Overlay, {\n        ref: ref,\n        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_3__.cn)(\"fixed inset-0 z-50 bg-black/80\", className),\n        ...props\n    }, void 0, false, {\n        fileName: \"/Users/bulatsitdikov/dev/piermont/components/ui/drawer.tsx\",\n        lineNumber: 29,\n        columnNumber: 3\n    }, undefined);\n});\n_c1 = DrawerOverlay;\nDrawerOverlay.displayName = vaul__WEBPACK_IMPORTED_MODULE_2__.Drawer.Overlay.displayName;\nconst DrawerContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c2 = (param, ref)=>{\n    let { className, children, ...props } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DrawerPortal, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DrawerOverlay, {}, void 0, false, {\n                fileName: \"/Users/bulatsitdikov/dev/piermont/components/ui/drawer.tsx\",\n                lineNumber: 42,\n                columnNumber: 5\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(vaul__WEBPACK_IMPORTED_MODULE_2__.Drawer.Content, {\n                ref: ref,\n                className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_3__.cn)(\"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\", className),\n                ...props,\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\"\n                    }, void 0, false, {\n                        fileName: \"/Users/bulatsitdikov/dev/piermont/components/ui/drawer.tsx\",\n                        lineNumber: 51,\n                        columnNumber: 7\n                    }, undefined),\n                    children\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/bulatsitdikov/dev/piermont/components/ui/drawer.tsx\",\n                lineNumber: 43,\n                columnNumber: 5\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/bulatsitdikov/dev/piermont/components/ui/drawer.tsx\",\n        lineNumber: 41,\n        columnNumber: 3\n    }, undefined);\n});\n_c3 = DrawerContent;\nDrawerContent.displayName = \"DrawerContent\";\nconst DrawerHeader = (param)=>{\n    let { className, ...props } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_3__.cn)(\"grid gap-1.5 p-4 text-center sm:text-left\", className),\n        ...props\n    }, void 0, false, {\n        fileName: \"/Users/bulatsitdikov/dev/piermont/components/ui/drawer.tsx\",\n        lineNumber: 62,\n        columnNumber: 3\n    }, undefined);\n};\n_c4 = DrawerHeader;\nDrawerHeader.displayName = \"DrawerHeader\";\nconst DrawerFooter = (param)=>{\n    let { className, ...props } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_3__.cn)(\"mt-auto flex flex-col gap-2 p-4\", className),\n        ...props\n    }, void 0, false, {\n        fileName: \"/Users/bulatsitdikov/dev/piermont/components/ui/drawer.tsx\",\n        lineNumber: 73,\n        columnNumber: 3\n    }, undefined);\n};\n_c5 = DrawerFooter;\nDrawerFooter.displayName = \"DrawerFooter\";\nconst DrawerTitle = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c6 = (param, ref)=>{\n    let { className, ...props } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(vaul__WEBPACK_IMPORTED_MODULE_2__.Drawer.Title, {\n        ref: ref,\n        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_3__.cn)(\"text-lg font-semibold leading-none tracking-tight\", className),\n        ...props\n    }, void 0, false, {\n        fileName: \"/Users/bulatsitdikov/dev/piermont/components/ui/drawer.tsx\",\n        lineNumber: 84,\n        columnNumber: 3\n    }, undefined);\n});\n_c7 = DrawerTitle;\nDrawerTitle.displayName = vaul__WEBPACK_IMPORTED_MODULE_2__.Drawer.Title.displayName;\nconst DrawerDescription = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(_c8 = (param, ref)=>{\n    let { className, ...props } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(vaul__WEBPACK_IMPORTED_MODULE_2__.Drawer.Description, {\n        ref: ref,\n        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_3__.cn)(\"text-sm text-muted-foreground\", className),\n        ...props\n    }, void 0, false, {\n        fileName: \"/Users/bulatsitdikov/dev/piermont/components/ui/drawer.tsx\",\n        lineNumber: 99,\n        columnNumber: 3\n    }, undefined);\n});\n_c9 = DrawerDescription;\nDrawerDescription.displayName = vaul__WEBPACK_IMPORTED_MODULE_2__.Drawer.Description.displayName;\n\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"Drawer\");\n$RefreshReg$(_c1, \"DrawerOverlay\");\n$RefreshReg$(_c2, \"DrawerContent$React.forwardRef\");\n$RefreshReg$(_c3, \"DrawerContent\");\n$RefreshReg$(_c4, \"DrawerHeader\");\n$RefreshReg$(_c5, \"DrawerFooter\");\n$RefreshReg$(_c6, \"DrawerTitle$React.forwardRef\");\n$RefreshReg$(_c7, \"DrawerTitle\");\n$RefreshReg$(_c8, \"DrawerDescription$React.forwardRef\");\n$RefreshReg$(_c9, \"DrawerDescription\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvdWkvZHJhd2VyLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRThCO0FBQ2tCO0FBRWhCO0FBRWhDLE1BQU1DLFNBQVM7UUFBQyxFQUNkRyx3QkFBd0IsSUFBSSxFQUM1QixHQUFHQyxPQUMrQzt5QkFDbEQsOERBQUNILHdDQUFlQSxDQUFDSSxJQUFJO1FBQ25CRix1QkFBdUJBO1FBQ3RCLEdBQUdDLEtBQUs7Ozs7Ozs7S0FOUEo7QUFTTkEsT0FBT00sV0FBVyxHQUFHO0FBRXJCLE1BQU1DLGdCQUFnQk4sd0NBQWVBLENBQUNPLE9BQU87QUFFN0MsTUFBTUMsZUFBZVIsd0NBQWVBLENBQUNTLE1BQU07QUFFM0MsTUFBTUMsY0FBY1Ysd0NBQWVBLENBQUNXLEtBQUs7QUFFekMsTUFBTUMsOEJBQWdCZCw2Q0FBZ0IsQ0FHcEMsUUFBMEJnQjtRQUF6QixFQUFFQyxTQUFTLEVBQUUsR0FBR1osT0FBTzt5QkFDeEIsOERBQUNILHdDQUFlQSxDQUFDZ0IsT0FBTztRQUN0QkYsS0FBS0E7UUFDTEMsV0FBV2QsOENBQUVBLENBQUMsa0NBQWtDYztRQUMvQyxHQUFHWixLQUFLOzs7Ozs7O01BUFBTO0FBVU5BLGNBQWNQLFdBQVcsR0FBR0wsd0NBQWVBLENBQUNnQixPQUFPLENBQUNYLFdBQVc7QUFFL0QsTUFBTVksOEJBQWdCbkIsNkNBQWdCLE9BR3BDLFFBQW9DZ0I7UUFBbkMsRUFBRUMsU0FBUyxFQUFFRyxRQUFRLEVBQUUsR0FBR2YsT0FBTzt5QkFDbEMsOERBQUNLOzswQkFDQyw4REFBQ0k7Ozs7OzBCQUNELDhEQUFDWix3Q0FBZUEsQ0FBQ21CLE9BQU87Z0JBQ3RCTCxLQUFLQTtnQkFDTEMsV0FBV2QsOENBQUVBLENBQ1gsa0dBQ0FjO2dCQUVELEdBQUdaLEtBQUs7O2tDQUVULDhEQUFDaUI7d0JBQUlMLFdBQVU7Ozs7OztvQkFDZEc7Ozs7Ozs7Ozs7Ozs7OztBQUlQRCxjQUFjWixXQUFXLEdBQUc7QUFFNUIsTUFBTWdCLGVBQWU7UUFBQyxFQUNwQk4sU0FBUyxFQUNULEdBQUdaLE9BQ2tDO3lCQUNyQyw4REFBQ2lCO1FBQ0NMLFdBQVdkLDhDQUFFQSxDQUFDLDZDQUE2Q2M7UUFDMUQsR0FBR1osS0FBSzs7Ozs7OztNQU5Qa0I7QUFTTkEsYUFBYWhCLFdBQVcsR0FBRztBQUUzQixNQUFNaUIsZUFBZTtRQUFDLEVBQ3BCUCxTQUFTLEVBQ1QsR0FBR1osT0FDa0M7eUJBQ3JDLDhEQUFDaUI7UUFDQ0wsV0FBV2QsOENBQUVBLENBQUMsbUNBQW1DYztRQUNoRCxHQUFHWixLQUFLOzs7Ozs7O01BTlBtQjtBQVNOQSxhQUFhakIsV0FBVyxHQUFHO0FBRTNCLE1BQU1rQiw0QkFBY3pCLDZDQUFnQixPQUdsQyxRQUEwQmdCO1FBQXpCLEVBQUVDLFNBQVMsRUFBRSxHQUFHWixPQUFPO3lCQUN4Qiw4REFBQ0gsd0NBQWVBLENBQUN3QixLQUFLO1FBQ3BCVixLQUFLQTtRQUNMQyxXQUFXZCw4Q0FBRUEsQ0FDWCxxREFDQWM7UUFFRCxHQUFHWixLQUFLOzs7Ozs7OztBQUdib0IsWUFBWWxCLFdBQVcsR0FBR0wsd0NBQWVBLENBQUN3QixLQUFLLENBQUNuQixXQUFXO0FBRTNELE1BQU1vQixrQ0FBb0IzQiw2Q0FBZ0IsT0FHeEMsUUFBMEJnQjtRQUF6QixFQUFFQyxTQUFTLEVBQUUsR0FBR1osT0FBTzt5QkFDeEIsOERBQUNILHdDQUFlQSxDQUFDMEIsV0FBVztRQUMxQlosS0FBS0E7UUFDTEMsV0FBV2QsOENBQUVBLENBQUMsaUNBQWlDYztRQUM5QyxHQUFHWixLQUFLOzs7Ozs7OztBQUdic0Isa0JBQWtCcEIsV0FBVyxHQUFHTCx3Q0FBZUEsQ0FBQzBCLFdBQVcsQ0FBQ3JCLFdBQVc7QUFhdEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy91aS9kcmF3ZXIudHN4P2U1YWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IERyYXdlciBhcyBEcmF3ZXJQcmltaXRpdmUgfSBmcm9tIFwidmF1bFwiXG5cbmltcG9ydCB7IGNuIH0gZnJvbSBcIkAvbGliL3V0aWxzXCJcblxuY29uc3QgRHJhd2VyID0gKHtcbiAgc2hvdWxkU2NhbGVCYWNrZ3JvdW5kID0gdHJ1ZSxcbiAgLi4ucHJvcHNcbn06IFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBEcmF3ZXJQcmltaXRpdmUuUm9vdD4pID0+IChcbiAgPERyYXdlclByaW1pdGl2ZS5Sb290XG4gICAgc2hvdWxkU2NhbGVCYWNrZ3JvdW5kPXtzaG91bGRTY2FsZUJhY2tncm91bmR9XG4gICAgey4uLnByb3BzfVxuICAvPlxuKVxuRHJhd2VyLmRpc3BsYXlOYW1lID0gXCJEcmF3ZXJcIlxuXG5jb25zdCBEcmF3ZXJUcmlnZ2VyID0gRHJhd2VyUHJpbWl0aXZlLlRyaWdnZXJcblxuY29uc3QgRHJhd2VyUG9ydGFsID0gRHJhd2VyUHJpbWl0aXZlLlBvcnRhbFxuXG5jb25zdCBEcmF3ZXJDbG9zZSA9IERyYXdlclByaW1pdGl2ZS5DbG9zZVxuXG5jb25zdCBEcmF3ZXJPdmVybGF5ID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgRHJhd2VyUHJpbWl0aXZlLk92ZXJsYXk+LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIERyYXdlclByaW1pdGl2ZS5PdmVybGF5PlxuPigoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIHJlZikgPT4gKFxuICA8RHJhd2VyUHJpbWl0aXZlLk92ZXJsYXlcbiAgICByZWY9e3JlZn1cbiAgICBjbGFzc05hbWU9e2NuKFwiZml4ZWQgaW5zZXQtMCB6LTUwIGJnLWJsYWNrLzgwXCIsIGNsYXNzTmFtZSl9XG4gICAgey4uLnByb3BzfVxuICAvPlxuKSlcbkRyYXdlck92ZXJsYXkuZGlzcGxheU5hbWUgPSBEcmF3ZXJQcmltaXRpdmUuT3ZlcmxheS5kaXNwbGF5TmFtZVxuXG5jb25zdCBEcmF3ZXJDb250ZW50ID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgRHJhd2VyUHJpbWl0aXZlLkNvbnRlbnQ+LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIERyYXdlclByaW1pdGl2ZS5Db250ZW50PlxuPigoeyBjbGFzc05hbWUsIGNoaWxkcmVuLCAuLi5wcm9wcyB9LCByZWYpID0+IChcbiAgPERyYXdlclBvcnRhbD5cbiAgICA8RHJhd2VyT3ZlcmxheSAvPlxuICAgIDxEcmF3ZXJQcmltaXRpdmUuQ29udGVudFxuICAgICAgcmVmPXtyZWZ9XG4gICAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgICBcImZpeGVkIGluc2V0LXgtMCBib3R0b20tMCB6LTUwIG10LTI0IGZsZXggaC1hdXRvIGZsZXgtY29sIHJvdW5kZWQtdC1bMTBweF0gYm9yZGVyIGJnLWJhY2tncm91bmRcIixcbiAgICAgICAgY2xhc3NOYW1lXG4gICAgICApfVxuICAgICAgey4uLnByb3BzfVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXgtYXV0byBtdC00IGgtMiB3LVsxMDBweF0gcm91bmRlZC1mdWxsIGJnLW11dGVkXCIgLz5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0RyYXdlclByaW1pdGl2ZS5Db250ZW50PlxuICA8L0RyYXdlclBvcnRhbD5cbikpXG5EcmF3ZXJDb250ZW50LmRpc3BsYXlOYW1lID0gXCJEcmF3ZXJDb250ZW50XCJcblxuY29uc3QgRHJhd2VySGVhZGVyID0gKHtcbiAgY2xhc3NOYW1lLFxuICAuLi5wcm9wc1xufTogUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTERpdkVsZW1lbnQ+KSA9PiAoXG4gIDxkaXZcbiAgICBjbGFzc05hbWU9e2NuKFwiZ3JpZCBnYXAtMS41IHAtNCB0ZXh0LWNlbnRlciBzbTp0ZXh0LWxlZnRcIiwgY2xhc3NOYW1lKX1cbiAgICB7Li4ucHJvcHN9XG4gIC8+XG4pXG5EcmF3ZXJIZWFkZXIuZGlzcGxheU5hbWUgPSBcIkRyYXdlckhlYWRlclwiXG5cbmNvbnN0IERyYXdlckZvb3RlciA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgLi4ucHJvcHNcbn06IFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PikgPT4gKFxuICA8ZGl2XG4gICAgY2xhc3NOYW1lPXtjbihcIm10LWF1dG8gZmxleCBmbGV4LWNvbCBnYXAtMiBwLTRcIiwgY2xhc3NOYW1lKX1cbiAgICB7Li4ucHJvcHN9XG4gIC8+XG4pXG5EcmF3ZXJGb290ZXIuZGlzcGxheU5hbWUgPSBcIkRyYXdlckZvb3RlclwiXG5cbmNvbnN0IERyYXdlclRpdGxlID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgRHJhd2VyUHJpbWl0aXZlLlRpdGxlPixcbiAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPHR5cGVvZiBEcmF3ZXJQcmltaXRpdmUuVGl0bGU+XG4+KCh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gIDxEcmF3ZXJQcmltaXRpdmUuVGl0bGVcbiAgICByZWY9e3JlZn1cbiAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgXCJ0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgbGVhZGluZy1ub25lIHRyYWNraW5nLXRpZ2h0XCIsXG4gICAgICBjbGFzc05hbWVcbiAgICApfVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbikpXG5EcmF3ZXJUaXRsZS5kaXNwbGF5TmFtZSA9IERyYXdlclByaW1pdGl2ZS5UaXRsZS5kaXNwbGF5TmFtZVxuXG5jb25zdCBEcmF3ZXJEZXNjcmlwdGlvbiA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIERyYXdlclByaW1pdGl2ZS5EZXNjcmlwdGlvbj4sXG4gIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgRHJhd2VyUHJpbWl0aXZlLkRlc2NyaXB0aW9uPlxuPigoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIHJlZikgPT4gKFxuICA8RHJhd2VyUHJpbWl0aXZlLkRlc2NyaXB0aW9uXG4gICAgcmVmPXtyZWZ9XG4gICAgY2xhc3NOYW1lPXtjbihcInRleHQtc20gdGV4dC1tdXRlZC1mb3JlZ3JvdW5kXCIsIGNsYXNzTmFtZSl9XG4gICAgey4uLnByb3BzfVxuICAvPlxuKSlcbkRyYXdlckRlc2NyaXB0aW9uLmRpc3BsYXlOYW1lID0gRHJhd2VyUHJpbWl0aXZlLkRlc2NyaXB0aW9uLmRpc3BsYXlOYW1lXG5cbmV4cG9ydCB7XG4gIERyYXdlcixcbiAgRHJhd2VyUG9ydGFsLFxuICBEcmF3ZXJPdmVybGF5LFxuICBEcmF3ZXJUcmlnZ2VyLFxuICBEcmF3ZXJDbG9zZSxcbiAgRHJhd2VyQ29udGVudCxcbiAgRHJhd2VySGVhZGVyLFxuICBEcmF3ZXJGb290ZXIsXG4gIERyYXdlclRpdGxlLFxuICBEcmF3ZXJEZXNjcmlwdGlvbixcbn1cbiJdLCJuYW1lcyI6WyJSZWFjdCIsIkRyYXdlciIsIkRyYXdlclByaW1pdGl2ZSIsImNuIiwic2hvdWxkU2NhbGVCYWNrZ3JvdW5kIiwicHJvcHMiLCJSb290IiwiZGlzcGxheU5hbWUiLCJEcmF3ZXJUcmlnZ2VyIiwiVHJpZ2dlciIsIkRyYXdlclBvcnRhbCIsIlBvcnRhbCIsIkRyYXdlckNsb3NlIiwiQ2xvc2UiLCJEcmF3ZXJPdmVybGF5IiwiZm9yd2FyZFJlZiIsInJlZiIsImNsYXNzTmFtZSIsIk92ZXJsYXkiLCJEcmF3ZXJDb250ZW50IiwiY2hpbGRyZW4iLCJDb250ZW50IiwiZGl2IiwiRHJhd2VySGVhZGVyIiwiRHJhd2VyRm9vdGVyIiwiRHJhd2VyVGl0bGUiLCJUaXRsZSIsIkRyYXdlckRlc2NyaXB0aW9uIiwiRGVzY3JpcHRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/ui/drawer.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/ui/index.tsx":
/*!*********************************!*\
  !*** ./components/ui/index.tsx ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Button: function() { return /* reexport safe */ _button__WEBPACK_IMPORTED_MODULE_0__.Button; },\n/* harmony export */   Checkbox: function() { return /* reexport safe */ _checkbox__WEBPACK_IMPORTED_MODULE_4__.Checkbox; },\n/* harmony export */   Drawer: function() { return /* reexport safe */ _drawer__WEBPACK_IMPORTED_MODULE_6__.Drawer; },\n/* harmony export */   DrawerClose: function() { return /* reexport safe */ _drawer__WEBPACK_IMPORTED_MODULE_6__.DrawerClose; },\n/* harmony export */   DrawerContent: function() { return /* reexport safe */ _drawer__WEBPACK_IMPORTED_MODULE_6__.DrawerContent; },\n/* harmony export */   DrawerDescription: function() { return /* reexport safe */ _drawer__WEBPACK_IMPORTED_MODULE_6__.DrawerDescription; },\n/* harmony export */   DrawerFooter: function() { return /* reexport safe */ _drawer__WEBPACK_IMPORTED_MODULE_6__.DrawerFooter; },\n/* harmony export */   DrawerHeader: function() { return /* reexport safe */ _drawer__WEBPACK_IMPORTED_MODULE_6__.DrawerHeader; },\n/* harmony export */   DrawerOverlay: function() { return /* reexport safe */ _drawer__WEBPACK_IMPORTED_MODULE_6__.DrawerOverlay; },\n/* harmony export */   DrawerPortal: function() { return /* reexport safe */ _drawer__WEBPACK_IMPORTED_MODULE_6__.DrawerPortal; },\n/* harmony export */   DrawerTitle: function() { return /* reexport safe */ _drawer__WEBPACK_IMPORTED_MODULE_6__.DrawerTitle; },\n/* harmony export */   DrawerTrigger: function() { return /* reexport safe */ _drawer__WEBPACK_IMPORTED_MODULE_6__.DrawerTrigger; },\n/* harmony export */   Form: function() { return /* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_2__.Form; },\n/* harmony export */   FormControl: function() { return /* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_2__.FormControl; },\n/* harmony export */   FormDescription: function() { return /* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_2__.FormDescription; },\n/* harmony export */   FormField: function() { return /* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_2__.FormField; },\n/* harmony export */   FormItem: function() { return /* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_2__.FormItem; },\n/* harmony export */   FormLabel: function() { return /* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_2__.FormLabel; },\n/* harmony export */   FormMessage: function() { return /* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_2__.FormMessage; },\n/* harmony export */   Input: function() { return /* reexport safe */ _input__WEBPACK_IMPORTED_MODULE_3__.Input; },\n/* harmony export */   Logo: function() { return /* reexport safe */ _Logo__WEBPACK_IMPORTED_MODULE_1__.Logo; },\n/* harmony export */   Separator: function() { return /* reexport safe */ _separator__WEBPACK_IMPORTED_MODULE_7__.Separator; },\n/* harmony export */   Sheet: function() { return /* reexport safe */ _sheet__WEBPACK_IMPORTED_MODULE_5__.Sheet; },\n/* harmony export */   SheetClose: function() { return /* reexport safe */ _sheet__WEBPACK_IMPORTED_MODULE_5__.SheetClose; },\n/* harmony export */   SheetContent: function() { return /* reexport safe */ _sheet__WEBPACK_IMPORTED_MODULE_5__.SheetContent; },\n/* harmony export */   SheetDescription: function() { return /* reexport safe */ _sheet__WEBPACK_IMPORTED_MODULE_5__.SheetDescription; },\n/* harmony export */   SheetFooter: function() { return /* reexport safe */ _sheet__WEBPACK_IMPORTED_MODULE_5__.SheetFooter; },\n/* harmony export */   SheetHeader: function() { return /* reexport safe */ _sheet__WEBPACK_IMPORTED_MODULE_5__.SheetHeader; },\n/* harmony export */   SheetOverlay: function() { return /* reexport safe */ _sheet__WEBPACK_IMPORTED_MODULE_5__.SheetOverlay; },\n/* harmony export */   SheetPortal: function() { return /* reexport safe */ _sheet__WEBPACK_IMPORTED_MODULE_5__.SheetPortal; },\n/* harmony export */   SheetTitle: function() { return /* reexport safe */ _sheet__WEBPACK_IMPORTED_MODULE_5__.SheetTitle; },\n/* harmony export */   SheetTrigger: function() { return /* reexport safe */ _sheet__WEBPACK_IMPORTED_MODULE_5__.SheetTrigger; },\n/* harmony export */   useFormField: function() { return /* reexport safe */ _form__WEBPACK_IMPORTED_MODULE_2__.useFormField; }\n/* harmony export */ });\n/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./button */ \"(app-pages-browser)/./components/ui/button.tsx\");\n/* harmony import */ var _Logo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Logo */ \"(app-pages-browser)/./components/ui/Logo.tsx\");\n/* harmony import */ var _form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./form */ \"(app-pages-browser)/./components/ui/form.tsx\");\n/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./input */ \"(app-pages-browser)/./components/ui/input.tsx\");\n/* harmony import */ var _checkbox__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./checkbox */ \"(app-pages-browser)/./components/ui/checkbox.tsx\");\n/* harmony import */ var _sheet__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sheet */ \"(app-pages-browser)/./components/ui/sheet.tsx\");\n/* harmony import */ var _drawer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./drawer */ \"(app-pages-browser)/./components/ui/drawer.tsx\");\n/* harmony import */ var _separator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./separator */ \"(app-pages-browser)/./components/ui/separator.tsx\");\n\n\n\n\n\n\n\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvdWkvaW5kZXgudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWtDO0FBQ0o7QUFVZDtBQUNnQjtBQUNNO0FBWXJCO0FBWUM7QUFDc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy91aS9pbmRleC50c3g/OTRkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBCdXR0b24gfSBmcm9tIFwiLi9idXR0b25cIjtcbmV4cG9ydCB7IExvZ28gfSBmcm9tIFwiLi9Mb2dvXCI7XG5leHBvcnQge1xuICB1c2VGb3JtRmllbGQsXG4gIEZvcm0sXG4gIEZvcm1JdGVtLFxuICBGb3JtTGFiZWwsXG4gIEZvcm1Db250cm9sLFxuICBGb3JtRGVzY3JpcHRpb24sXG4gIEZvcm1NZXNzYWdlLFxuICBGb3JtRmllbGQsXG59IGZyb20gXCIuL2Zvcm1cIjtcbmV4cG9ydCB7IElucHV0IH0gZnJvbSBcIi4vaW5wdXRcIjtcbmV4cG9ydCB7IENoZWNrYm94IH0gZnJvbSBcIi4vY2hlY2tib3hcIjtcbmV4cG9ydCB7XG4gIFNoZWV0LFxuICBTaGVldFBvcnRhbCxcbiAgU2hlZXRPdmVybGF5LFxuICBTaGVldFRyaWdnZXIsXG4gIFNoZWV0Q2xvc2UsXG4gIFNoZWV0Q29udGVudCxcbiAgU2hlZXRIZWFkZXIsXG4gIFNoZWV0Rm9vdGVyLFxuICBTaGVldFRpdGxlLFxuICBTaGVldERlc2NyaXB0aW9uLFxufSBmcm9tIFwiLi9zaGVldFwiO1xuZXhwb3J0IHtcbiAgRHJhd2VyLFxuICBEcmF3ZXJQb3J0YWwsXG4gIERyYXdlck92ZXJsYXksXG4gIERyYXdlclRyaWdnZXIsXG4gIERyYXdlckNsb3NlLFxuICBEcmF3ZXJDb250ZW50LFxuICBEcmF3ZXJIZWFkZXIsXG4gIERyYXdlckZvb3RlcixcbiAgRHJhd2VyVGl0bGUsXG4gIERyYXdlckRlc2NyaXB0aW9uLFxufSBmcm9tIFwiLi9kcmF3ZXJcIjtcbmV4cG9ydCB7IFNlcGFyYXRvciB9IGZyb20gXCIuL3NlcGFyYXRvclwiO1xuIl0sIm5hbWVzIjpbIkJ1dHRvbiIsIkxvZ28iLCJ1c2VGb3JtRmllbGQiLCJGb3JtIiwiRm9ybUl0ZW0iLCJGb3JtTGFiZWwiLCJGb3JtQ29udHJvbCIsIkZvcm1EZXNjcmlwdGlvbiIsIkZvcm1NZXNzYWdlIiwiRm9ybUZpZWxkIiwiSW5wdXQiLCJDaGVja2JveCIsIlNoZWV0IiwiU2hlZXRQb3J0YWwiLCJTaGVldE92ZXJsYXkiLCJTaGVldFRyaWdnZXIiLCJTaGVldENsb3NlIiwiU2hlZXRDb250ZW50IiwiU2hlZXRIZWFkZXIiLCJTaGVldEZvb3RlciIsIlNoZWV0VGl0bGUiLCJTaGVldERlc2NyaXB0aW9uIiwiRHJhd2VyIiwiRHJhd2VyUG9ydGFsIiwiRHJhd2VyT3ZlcmxheSIsIkRyYXdlclRyaWdnZXIiLCJEcmF3ZXJDbG9zZSIsIkRyYXdlckNvbnRlbnQiLCJEcmF3ZXJIZWFkZXIiLCJEcmF3ZXJGb290ZXIiLCJEcmF3ZXJUaXRsZSIsIkRyYXdlckRlc2NyaXB0aW9uIiwiU2VwYXJhdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/ui/index.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/vaul/dist/index.mjs":
/*!******************************************!*\
  !*** ./node_modules/vaul/dist/index.mjs ***!
  \******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Content: function() { return /* binding */ Content; },\n/* harmony export */   Drawer: function() { return /* binding */ Drawer; },\n/* harmony export */   Handle: function() { return /* binding */ Handle; },\n/* harmony export */   NestedRoot: function() { return /* binding */ NestedRoot; },\n/* harmony export */   Overlay: function() { return /* binding */ Overlay; },\n/* harmony export */   Portal: function() { return /* binding */ Portal; },\n/* harmony export */   Root: function() { return /* binding */ Root; }\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/react-dialog */ \"(app-pages-browser)/./node_modules/@radix-ui/react-dialog/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* __next_internal_client_entry_do_not_use__ Content,Drawer,Handle,NestedRoot,Overlay,Portal,Root auto */ var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$(), _s14 = $RefreshSig$();\nfunction __insertCSS(code) {\n    if (!code || typeof document == \"undefined\") return;\n    let head = document.head || document.getElementsByTagName(\"head\")[0];\n    let style = document.createElement(\"style\");\n    style.type = \"text/css\";\n    head.appendChild(style);\n    style.styleSheet ? style.styleSheet.cssText = code : style.appendChild(document.createTextNode(code));\n}\n\n\n\nconst DrawerContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    drawerRef: {\n        current: null\n    },\n    overlayRef: {\n        current: null\n    },\n    onPress: ()=>{},\n    onRelease: ()=>{},\n    onDrag: ()=>{},\n    onNestedDrag: ()=>{},\n    onNestedOpenChange: ()=>{},\n    onNestedRelease: ()=>{},\n    openProp: undefined,\n    dismissible: false,\n    isOpen: false,\n    isDragging: false,\n    keyboardIsOpen: {\n        current: false\n    },\n    snapPointsOffset: null,\n    snapPoints: null,\n    handleOnly: false,\n    modal: false,\n    shouldFade: false,\n    activeSnapPoint: null,\n    onOpenChange: ()=>{},\n    setActiveSnapPoint: ()=>{},\n    closeDrawer: ()=>{},\n    direction: \"bottom\",\n    shouldAnimate: {\n        current: true\n    },\n    shouldScaleBackground: false,\n    setBackgroundColorOnScale: true,\n    noBodyStyles: false,\n    container: null,\n    autoFocus: false\n});\nconst useDrawerContext = ()=>{\n    _s();\n    const context = react__WEBPACK_IMPORTED_MODULE_0__.useContext(DrawerContext);\n    if (!context) {\n        throw new Error(\"useDrawerContext must be used within a Drawer.Root\");\n    }\n    return context;\n};\n_s(useDrawerContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n__insertCSS(\"[data-vaul-drawer]{touch-action:none;will-change:transform;transition:transform .5s cubic-bezier(.32, .72, 0, 1);animation-duration:.5s;animation-timing-function:cubic-bezier(0.32,0.72,0,1)}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=bottom][data-state=open]{animation-name:slideFromBottom}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=bottom][data-state=closed]{animation-name:slideToBottom}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=top][data-state=open]{animation-name:slideFromTop}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=top][data-state=closed]{animation-name:slideToTop}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=left][data-state=open]{animation-name:slideFromLeft}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=left][data-state=closed]{animation-name:slideToLeft}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=right][data-state=open]{animation-name:slideFromRight}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=right][data-state=closed]{animation-name:slideToRight}[data-vaul-drawer][data-vaul-snap-points=true][data-vaul-drawer-direction=bottom]{transform:translate3d(0,var(--initial-transform,100%),0)}[data-vaul-drawer][data-vaul-snap-points=true][data-vaul-drawer-direction=top]{transform:translate3d(0,calc(var(--initial-transform,100%) * -1),0)}[data-vaul-drawer][data-vaul-snap-points=true][data-vaul-drawer-direction=left]{transform:translate3d(calc(var(--initial-transform,100%) * -1),0,0)}[data-vaul-drawer][data-vaul-snap-points=true][data-vaul-drawer-direction=right]{transform:translate3d(var(--initial-transform,100%),0,0)}[data-vaul-drawer][data-vaul-delayed-snap-points=true][data-vaul-drawer-direction=top]{transform:translate3d(0,var(--snap-point-height,0),0)}[data-vaul-drawer][data-vaul-delayed-snap-points=true][data-vaul-drawer-direction=bottom]{transform:translate3d(0,var(--snap-point-height,0),0)}[data-vaul-drawer][data-vaul-delayed-snap-points=true][data-vaul-drawer-direction=left]{transform:translate3d(var(--snap-point-height,0),0,0)}[data-vaul-drawer][data-vaul-delayed-snap-points=true][data-vaul-drawer-direction=right]{transform:translate3d(var(--snap-point-height,0),0,0)}[data-vaul-overlay][data-vaul-snap-points=false]{animation-duration:.5s;animation-timing-function:cubic-bezier(0.32,0.72,0,1)}[data-vaul-overlay][data-vaul-snap-points=false][data-state=open]{animation-name:fadeIn}[data-vaul-overlay][data-state=closed]{animation-name:fadeOut}[data-vaul-animate=false]{animation:none!important}[data-vaul-overlay][data-vaul-snap-points=true]{opacity:0;transition:opacity .5s cubic-bezier(.32, .72, 0, 1)}[data-vaul-overlay][data-vaul-snap-points=true]{opacity:1}[data-vaul-drawer]:not([data-vaul-custom-container=true])::after{content:'';position:absolute;background:inherit;background-color:inherit}[data-vaul-drawer][data-vaul-drawer-direction=top]::after{top:initial;bottom:100%;left:0;right:0;height:200%}[data-vaul-drawer][data-vaul-drawer-direction=bottom]::after{top:100%;bottom:initial;left:0;right:0;height:200%}[data-vaul-drawer][data-vaul-drawer-direction=left]::after{left:initial;right:100%;top:0;bottom:0;width:200%}[data-vaul-drawer][data-vaul-drawer-direction=right]::after{left:100%;right:initial;top:0;bottom:0;width:200%}[data-vaul-overlay][data-vaul-snap-points=true]:not([data-vaul-snap-points-overlay=true]):not(\\n[data-state=closed]\\n){opacity:0}[data-vaul-overlay][data-vaul-snap-points-overlay=true]{opacity:1}[data-vaul-handle]{display:block;position:relative;opacity:.7;background:#e2e2e4;margin-left:auto;margin-right:auto;height:5px;width:32px;border-radius:1rem;touch-action:pan-y}[data-vaul-handle]:active,[data-vaul-handle]:hover{opacity:1}[data-vaul-handle-hitarea]{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);width:max(100%,2.75rem);height:max(100%,2.75rem);touch-action:inherit}@media (hover:hover) and (pointer:fine){[data-vaul-drawer]{user-select:none}}@media (pointer:fine){[data-vaul-handle-hitarea]:{width:100%;height:100%}}@keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeOut{to{opacity:0}}@keyframes slideFromBottom{from{transform:translate3d(0,var(--initial-transform,100%),0)}to{transform:translate3d(0,0,0)}}@keyframes slideToBottom{to{transform:translate3d(0,var(--initial-transform,100%),0)}}@keyframes slideFromTop{from{transform:translate3d(0,calc(var(--initial-transform,100%) * -1),0)}to{transform:translate3d(0,0,0)}}@keyframes slideToTop{to{transform:translate3d(0,calc(var(--initial-transform,100%) * -1),0)}}@keyframes slideFromLeft{from{transform:translate3d(calc(var(--initial-transform,100%) * -1),0,0)}to{transform:translate3d(0,0,0)}}@keyframes slideToLeft{to{transform:translate3d(calc(var(--initial-transform,100%) * -1),0,0)}}@keyframes slideFromRight{from{transform:translate3d(var(--initial-transform,100%),0,0)}to{transform:translate3d(0,0,0)}}@keyframes slideToRight{to{transform:translate3d(var(--initial-transform,100%),0,0)}}\");\nfunction isMobileFirefox() {\n    const userAgent = navigator.userAgent;\n    return typeof window !== \"undefined\" && (/Firefox/.test(userAgent) && /Mobile/.test(userAgent) || // Android Firefox\n    /FxiOS/.test(userAgent) // iOS Firefox\n    );\n}\nfunction isMac() {\n    return testPlatform(/^Mac/);\n}\nfunction isIPhone() {\n    return testPlatform(/^iPhone/);\n}\nfunction isSafari() {\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n}\nfunction isIPad() {\n    return testPlatform(/^iPad/) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.\n    isMac() && navigator.maxTouchPoints > 1;\n}\nfunction isIOS() {\n    return isIPhone() || isIPad();\n}\nfunction testPlatform(re) {\n    return typeof window !== \"undefined\" && window.navigator != null ? re.test(window.navigator.platform) : undefined;\n}\n// This code comes from https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/overlays/src/usePreventScroll.ts\nconst KEYBOARD_BUFFER = 24;\nconst useIsomorphicLayoutEffect = typeof window !== \"undefined\" ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction chain$1() {\n    for(var _len = arguments.length, callbacks = new Array(_len), _key = 0; _key < _len; _key++){\n        callbacks[_key] = arguments[_key];\n    }\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        for (let callback of callbacks){\n            if (typeof callback === \"function\") {\n                callback(...args);\n            }\n        }\n    };\n}\n// @ts-ignore\nconst visualViewport = typeof document !== \"undefined\" && window.visualViewport;\nfunction isScrollable(node) {\n    let style = window.getComputedStyle(node);\n    return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);\n}\nfunction getScrollParent(node) {\n    if (isScrollable(node)) {\n        node = node.parentElement;\n    }\n    while(node && !isScrollable(node)){\n        node = node.parentElement;\n    }\n    return node || document.scrollingElement || document.documentElement;\n}\n// HTML input types that do not cause the software keyboard to appear.\nconst nonTextInputTypes = new Set([\n    \"checkbox\",\n    \"radio\",\n    \"range\",\n    \"color\",\n    \"file\",\n    \"image\",\n    \"button\",\n    \"submit\",\n    \"reset\"\n]);\n// The number of active usePreventScroll calls. Used to determine whether to revert back to the original page style/scroll position\nlet preventScrollCount = 0;\nlet restore;\n/**\n * Prevents scrolling on the document body on mount, and\n * restores it on unmount. Also ensures that content does not\n * shift due to the scrollbars disappearing.\n */ function usePreventScroll() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    _s1();\n    let { isDisabled } = options;\n    useIsomorphicLayoutEffect(()=>{\n        if (isDisabled) {\n            return;\n        }\n        preventScrollCount++;\n        if (preventScrollCount === 1) {\n            if (isIOS()) {\n                restore = preventScrollMobileSafari();\n            }\n        }\n        return ()=>{\n            preventScrollCount--;\n            if (preventScrollCount === 0) {\n                restore == null ? void 0 : restore();\n            }\n        };\n    }, [\n        isDisabled\n    ]);\n}\n_s1(usePreventScroll, \"Vd+jpwighRca2oU8HoLqd+zm4Bo=\", false, function() {\n    return [\n        useIsomorphicLayoutEffect\n    ];\n});\n// Mobile Safari is a whole different beast. Even with overflow: hidden,\n// it still scrolls the page in many situations:\n//\n// 1. When the bottom toolbar and address bar are collapsed, page scrolling is always allowed.\n// 2. When the keyboard is visible, the viewport does not resize. Instead, the keyboard covers part of\n//    it, so it becomes scrollable.\n// 3. When tapping on an input, the page always scrolls so that the input is centered in the visual viewport.\n//    This may cause even fixed position elements to scroll off the screen.\n// 4. When using the next/previous buttons in the keyboard to navigate between inputs, the whole page always\n//    scrolls, even if the input is inside a nested scrollable element that could be scrolled instead.\n//\n// In order to work around these cases, and prevent scrolling without jankiness, we do a few things:\n//\n// 1. Prevent default on `touchmove` events that are not in a scrollable element. This prevents touch scrolling\n//    on the window.\n// 2. Prevent default on `touchmove` events inside a scrollable element when the scroll position is at the\n//    top or bottom. This avoids the whole page scrolling instead, but does prevent overscrolling.\n// 3. Prevent default on `touchend` events on input elements and handle focusing the element ourselves.\n// 4. When focusing an input, apply a transform to trick Safari into thinking the input is at the top\n//    of the page, which prevents it from scrolling the page. After the input is focused, scroll the element\n//    into view ourselves, without scrolling the whole page.\n// 5. Offset the body by the scroll position using a negative margin and scroll to the top. This should appear the\n//    same visually, but makes the actual scroll position always zero. This is required to make all of the\n//    above work or Safari will still try to scroll the page when focusing an input.\n// 6. As a last resort, handle window scroll events, and scroll back to the top. This can happen when attempting\n//    to navigate to an input with the next/previous buttons that's outside a modal.\nfunction preventScrollMobileSafari() {\n    let scrollable;\n    let lastY = 0;\n    let onTouchStart = (e)=>{\n        // Store the nearest scrollable parent element from the element that the user touched.\n        scrollable = getScrollParent(e.target);\n        if (scrollable === document.documentElement && scrollable === document.body) {\n            return;\n        }\n        lastY = e.changedTouches[0].pageY;\n    };\n    let onTouchMove = (e)=>{\n        // Prevent scrolling the window.\n        if (!scrollable || scrollable === document.documentElement || scrollable === document.body) {\n            e.preventDefault();\n            return;\n        }\n        // Prevent scrolling up when at the top and scrolling down when at the bottom\n        // of a nested scrollable area, otherwise mobile Safari will start scrolling\n        // the window instead. Unfortunately, this disables bounce scrolling when at\n        // the top but it's the best we can do.\n        let y = e.changedTouches[0].pageY;\n        let scrollTop = scrollable.scrollTop;\n        let bottom = scrollable.scrollHeight - scrollable.clientHeight;\n        if (bottom === 0) {\n            return;\n        }\n        if (scrollTop <= 0 && y > lastY || scrollTop >= bottom && y < lastY) {\n            e.preventDefault();\n        }\n        lastY = y;\n    };\n    let onTouchEnd = (e)=>{\n        let target = e.target;\n        // Apply this change if we're not already focused on the target element\n        if (isInput(target) && target !== document.activeElement) {\n            e.preventDefault();\n            // Apply a transform to trick Safari into thinking the input is at the top of the page\n            // so it doesn't try to scroll it into view. When tapping on an input, this needs to\n            // be done before the \"focus\" event, so we have to focus the element ourselves.\n            target.style.transform = \"translateY(-2000px)\";\n            target.focus();\n            requestAnimationFrame(()=>{\n                target.style.transform = \"\";\n            });\n        }\n    };\n    let onFocus = (e)=>{\n        let target = e.target;\n        if (isInput(target)) {\n            // Transform also needs to be applied in the focus event in cases where focus moves\n            // other than tapping on an input directly, e.g. the next/previous buttons in the\n            // software keyboard. In these cases, it seems applying the transform in the focus event\n            // is good enough, whereas when tapping an input, it must be done before the focus event. 🤷‍♂️\n            target.style.transform = \"translateY(-2000px)\";\n            requestAnimationFrame(()=>{\n                target.style.transform = \"\";\n                // This will have prevented the browser from scrolling the focused element into view,\n                // so we need to do this ourselves in a way that doesn't cause the whole page to scroll.\n                if (visualViewport) {\n                    if (visualViewport.height < window.innerHeight) {\n                        // If the keyboard is already visible, do this after one additional frame\n                        // to wait for the transform to be removed.\n                        requestAnimationFrame(()=>{\n                            scrollIntoView(target);\n                        });\n                    } else {\n                        // Otherwise, wait for the visual viewport to resize before scrolling so we can\n                        // measure the correct position to scroll to.\n                        visualViewport.addEventListener(\"resize\", ()=>scrollIntoView(target), {\n                            once: true\n                        });\n                    }\n                }\n            });\n        }\n    };\n    let onWindowScroll = ()=>{\n        // Last resort. If the window scrolled, scroll it back to the top.\n        // It should always be at the top because the body will have a negative margin (see below).\n        window.scrollTo(0, 0);\n    };\n    // Record the original scroll position so we can restore it.\n    // Then apply a negative margin to the body to offset it by the scroll position. This will\n    // enable us to scroll the window to the top, which is required for the rest of this to work.\n    let scrollX = window.pageXOffset;\n    let scrollY = window.pageYOffset;\n    let restoreStyles = chain$1(setStyle(document.documentElement, \"paddingRight\", \"\".concat(window.innerWidth - document.documentElement.clientWidth, \"px\")));\n    // Scroll to the top. The negative margin on the body will make this appear the same.\n    window.scrollTo(0, 0);\n    let removeEvents = chain$1(addEvent(document, \"touchstart\", onTouchStart, {\n        passive: false,\n        capture: true\n    }), addEvent(document, \"touchmove\", onTouchMove, {\n        passive: false,\n        capture: true\n    }), addEvent(document, \"touchend\", onTouchEnd, {\n        passive: false,\n        capture: true\n    }), addEvent(document, \"focus\", onFocus, true), addEvent(window, \"scroll\", onWindowScroll));\n    return ()=>{\n        // Restore styles and scroll the page back to where it was.\n        restoreStyles();\n        removeEvents();\n        window.scrollTo(scrollX, scrollY);\n    };\n}\n// Sets a CSS property on an element, and returns a function to revert it to the previous value.\nfunction setStyle(element, style, value) {\n    // https://github.com/microsoft/TypeScript/issues/17827#issuecomment-391663310\n    // @ts-ignore\n    let cur = element.style[style];\n    // @ts-ignore\n    element.style[style] = value;\n    return ()=>{\n        // @ts-ignore\n        element.style[style] = cur;\n    };\n}\n// Adds an event listener to an element, and returns a function to remove it.\nfunction addEvent(target, event, handler, options) {\n    // @ts-ignore\n    target.addEventListener(event, handler, options);\n    return ()=>{\n        // @ts-ignore\n        target.removeEventListener(event, handler, options);\n    };\n}\nfunction scrollIntoView(target) {\n    let root = document.scrollingElement || document.documentElement;\n    while(target && target !== root){\n        // Find the parent scrollable element and adjust the scroll position if the target is not already in view.\n        let scrollable = getScrollParent(target);\n        if (scrollable !== document.documentElement && scrollable !== document.body && scrollable !== target) {\n            let scrollableTop = scrollable.getBoundingClientRect().top;\n            let targetTop = target.getBoundingClientRect().top;\n            let targetBottom = target.getBoundingClientRect().bottom;\n            // Buffer is needed for some edge cases\n            const keyboardHeight = scrollable.getBoundingClientRect().bottom + KEYBOARD_BUFFER;\n            if (targetBottom > keyboardHeight) {\n                scrollable.scrollTop += targetTop - scrollableTop;\n            }\n        }\n        // @ts-ignore\n        target = scrollable.parentElement;\n    }\n}\nfunction isInput(target) {\n    return target instanceof HTMLInputElement && !nonTextInputTypes.has(target.type) || target instanceof HTMLTextAreaElement || target instanceof HTMLElement && target.isContentEditable;\n}\n// This code comes from https://github.com/radix-ui/primitives/tree/main/packages/react/compose-refs\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */ function setRef(ref, value) {\n    if (typeof ref === \"function\") {\n        ref(value);\n    } else if (ref !== null && ref !== undefined) {\n        ref.current = value;\n    }\n}\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */ function composeRefs() {\n    for(var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++){\n        refs[_key] = arguments[_key];\n    }\n    return (node)=>refs.forEach((ref)=>setRef(ref, node));\n}\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */ function useComposedRefs() {\n    for(var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++){\n        refs[_key] = arguments[_key];\n    }\n    _s2();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(composeRefs(...refs), refs);\n}\n_s2(useComposedRefs, \"epj4qY15NHsef74wNqHIp5fdZmg=\");\nconst cache = new WeakMap();\nfunction set(el, styles) {\n    let ignoreCache = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    if (!el || !(el instanceof HTMLElement)) return;\n    let originalStyles = {};\n    Object.entries(styles).forEach((param)=>{\n        let [key, value] = param;\n        if (key.startsWith(\"--\")) {\n            el.style.setProperty(key, value);\n            return;\n        }\n        originalStyles[key] = el.style[key];\n        el.style[key] = value;\n    });\n    if (ignoreCache) return;\n    cache.set(el, originalStyles);\n}\nfunction reset(el, prop) {\n    if (!el || !(el instanceof HTMLElement)) return;\n    let originalStyles = cache.get(el);\n    if (!originalStyles) {\n        return;\n    }\n    {\n        el.style[prop] = originalStyles[prop];\n    }\n}\nconst isVertical = (direction)=>{\n    switch(direction){\n        case \"top\":\n        case \"bottom\":\n            return true;\n        case \"left\":\n        case \"right\":\n            return false;\n        default:\n            return direction;\n    }\n};\nfunction getTranslate(element, direction) {\n    if (!element) {\n        return null;\n    }\n    const style = window.getComputedStyle(element);\n    const transform = style.transform || style.webkitTransform || style.mozTransform;\n    let mat = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (mat) {\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n        return parseFloat(mat[1].split(\", \")[isVertical(direction) ? 13 : 12]);\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n    mat = transform.match(/^matrix\\((.+)\\)$/);\n    return mat ? parseFloat(mat[1].split(\", \")[isVertical(direction) ? 5 : 4]) : null;\n}\nfunction dampenValue(v) {\n    return 8 * (Math.log(v + 1) - 2);\n}\nfunction assignStyle(element, style) {\n    if (!element) return ()=>{};\n    const prevStyle = element.style.cssText;\n    Object.assign(element.style, style);\n    return ()=>{\n        element.style.cssText = prevStyle;\n    };\n}\n/**\n * Receives functions as arguments and returns a new function that calls all.\n */ function chain() {\n    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){\n        fns[_key] = arguments[_key];\n    }\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        for (const fn of fns){\n            if (typeof fn === \"function\") {\n                // @ts-ignore\n                fn(...args);\n            }\n        }\n    };\n}\nconst TRANSITIONS = {\n    DURATION: 0.5,\n    EASE: [\n        0.32,\n        0.72,\n        0,\n        1\n    ]\n};\nconst VELOCITY_THRESHOLD = 0.4;\nconst CLOSE_THRESHOLD = 0.25;\nconst SCROLL_LOCK_TIMEOUT = 100;\nconst BORDER_RADIUS = 8;\nconst NESTED_DISPLACEMENT = 16;\nconst WINDOW_TOP_OFFSET = 26;\nconst DRAG_CLASS = \"vaul-dragging\";\n// This code comes from https://github.com/radix-ui/primitives/blob/main/packages/react/use-controllable-state/src/useControllableState.tsx\nfunction useCallbackRef(callback) {\n    _s3();\n    const callbackRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(callback);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        callbackRef.current = callback;\n    });\n    // https://github.com/facebook/react/issues/19240\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return callbackRef.current == null ? void 0 : callbackRef.current.call(callbackRef, ...args);\n        }, []);\n}\n_s3(useCallbackRef, \"SmGaH/nKwK47PDNwL1mpt0Q/3Os=\");\nfunction useUncontrolledState(param) {\n    let { defaultProp, onChange } = param;\n    _s4();\n    const uncontrolledState = react__WEBPACK_IMPORTED_MODULE_0__.useState(defaultProp);\n    const [value] = uncontrolledState;\n    const prevValueRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(value);\n    const handleChange = useCallbackRef(onChange);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (prevValueRef.current !== value) {\n            handleChange(value);\n            prevValueRef.current = value;\n        }\n    }, [\n        value,\n        prevValueRef,\n        handleChange\n    ]);\n    return uncontrolledState;\n}\n_s4(useUncontrolledState, \"WYmWcqnKHe65L/fGBBy1wqlZl58=\", false, function() {\n    return [\n        useCallbackRef\n    ];\n});\nfunction useControllableState(param) {\n    let { prop, defaultProp, onChange = ()=>{} } = param;\n    _s5();\n    const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({\n        defaultProp,\n        onChange\n    });\n    const isControlled = prop !== undefined;\n    const value = isControlled ? prop : uncontrolledProp;\n    const handleChange = useCallbackRef(onChange);\n    const setValue = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((nextValue)=>{\n        if (isControlled) {\n            const setter = nextValue;\n            const value = typeof nextValue === \"function\" ? setter(prop) : nextValue;\n            if (value !== prop) handleChange(value);\n        } else {\n            setUncontrolledProp(nextValue);\n        }\n    }, [\n        isControlled,\n        prop,\n        setUncontrolledProp,\n        handleChange\n    ]);\n    return [\n        value,\n        setValue\n    ];\n}\n_s5(useControllableState, \"pnf37/jPbWy5FyBo0SyW8qgIfGA=\", false, function() {\n    return [\n        useUncontrolledState,\n        useCallbackRef\n    ];\n});\nfunction useSnapPoints(param) {\n    let { activeSnapPointProp, setActiveSnapPointProp, snapPoints, drawerRef, overlayRef, fadeFromIndex, onSnapPointChange, direction = \"bottom\", container, snapToSequentialPoint } = param;\n    _s6();\n    const [activeSnapPoint, setActiveSnapPoint] = useControllableState({\n        prop: activeSnapPointProp,\n        defaultProp: snapPoints == null ? void 0 : snapPoints[0],\n        onChange: setActiveSnapPointProp\n    });\n    const [windowDimensions, setWindowDimensions] = react__WEBPACK_IMPORTED_MODULE_0__.useState(typeof window !== \"undefined\" ? {\n        innerWidth: window.innerWidth,\n        innerHeight: window.innerHeight\n    } : undefined);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        function onResize() {\n            setWindowDimensions({\n                innerWidth: window.innerWidth,\n                innerHeight: window.innerHeight\n            });\n        }\n        window.addEventListener(\"resize\", onResize);\n        return ()=>window.removeEventListener(\"resize\", onResize);\n    }, []);\n    const isLastSnapPoint = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>activeSnapPoint === (snapPoints == null ? void 0 : snapPoints[snapPoints.length - 1]) || null, [\n        snapPoints,\n        activeSnapPoint\n    ]);\n    const activeSnapPointIndex = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        var _snapPoints_findIndex;\n        return (_snapPoints_findIndex = snapPoints == null ? void 0 : snapPoints.findIndex((snapPoint)=>snapPoint === activeSnapPoint)) != null ? _snapPoints_findIndex : null;\n    }, [\n        snapPoints,\n        activeSnapPoint\n    ]);\n    const shouldFade = snapPoints && snapPoints.length > 0 && (fadeFromIndex || fadeFromIndex === 0) && !Number.isNaN(fadeFromIndex) && snapPoints[fadeFromIndex] === activeSnapPoint || !snapPoints;\n    const snapPointsOffset = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const containerSize = container ? {\n            width: container.getBoundingClientRect().width,\n            height: container.getBoundingClientRect().height\n        } : typeof window !== \"undefined\" ? {\n            width: window.innerWidth,\n            height: window.innerHeight\n        } : {\n            width: 0,\n            height: 0\n        };\n        var _snapPoints_map;\n        return (_snapPoints_map = snapPoints == null ? void 0 : snapPoints.map((snapPoint)=>{\n            const isPx = typeof snapPoint === \"string\";\n            let snapPointAsNumber = 0;\n            if (isPx) {\n                snapPointAsNumber = parseInt(snapPoint, 10);\n            }\n            if (isVertical(direction)) {\n                const height = isPx ? snapPointAsNumber : windowDimensions ? snapPoint * containerSize.height : 0;\n                if (windowDimensions) {\n                    return direction === \"bottom\" ? containerSize.height - height : -containerSize.height + height;\n                }\n                return height;\n            }\n            const width = isPx ? snapPointAsNumber : windowDimensions ? snapPoint * containerSize.width : 0;\n            if (windowDimensions) {\n                return direction === \"right\" ? containerSize.width - width : -containerSize.width + width;\n            }\n            return width;\n        })) != null ? _snapPoints_map : [];\n    }, [\n        snapPoints,\n        windowDimensions,\n        container\n    ]);\n    const activeSnapPointOffset = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>activeSnapPointIndex !== null ? snapPointsOffset == null ? void 0 : snapPointsOffset[activeSnapPointIndex] : null, [\n        snapPointsOffset,\n        activeSnapPointIndex\n    ]);\n    const snapToPoint = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((dimension)=>{\n        var _snapPointsOffset_findIndex;\n        const newSnapPointIndex = (_snapPointsOffset_findIndex = snapPointsOffset == null ? void 0 : snapPointsOffset.findIndex((snapPointDim)=>snapPointDim === dimension)) != null ? _snapPointsOffset_findIndex : null;\n        onSnapPointChange(newSnapPointIndex);\n        set(drawerRef.current, {\n            transition: \"transform \".concat(TRANSITIONS.DURATION, \"s cubic-bezier(\").concat(TRANSITIONS.EASE.join(\",\"), \")\"),\n            transform: isVertical(direction) ? \"translate3d(0, \".concat(dimension, \"px, 0)\") : \"translate3d(\".concat(dimension, \"px, 0, 0)\")\n        });\n        if (snapPointsOffset && newSnapPointIndex !== snapPointsOffset.length - 1 && fadeFromIndex !== undefined && newSnapPointIndex !== fadeFromIndex && newSnapPointIndex < fadeFromIndex) {\n            set(overlayRef.current, {\n                transition: \"opacity \".concat(TRANSITIONS.DURATION, \"s cubic-bezier(\").concat(TRANSITIONS.EASE.join(\",\"), \")\"),\n                opacity: \"0\"\n            });\n        } else {\n            set(overlayRef.current, {\n                transition: \"opacity \".concat(TRANSITIONS.DURATION, \"s cubic-bezier(\").concat(TRANSITIONS.EASE.join(\",\"), \")\"),\n                opacity: \"1\"\n            });\n        }\n        setActiveSnapPoint(snapPoints == null ? void 0 : snapPoints[Math.max(newSnapPointIndex, 0)]);\n    }, [\n        drawerRef.current,\n        snapPoints,\n        snapPointsOffset,\n        fadeFromIndex,\n        overlayRef,\n        setActiveSnapPoint\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (activeSnapPoint || activeSnapPointProp) {\n            var _snapPoints_findIndex;\n            const newIndex = (_snapPoints_findIndex = snapPoints == null ? void 0 : snapPoints.findIndex((snapPoint)=>snapPoint === activeSnapPointProp || snapPoint === activeSnapPoint)) != null ? _snapPoints_findIndex : -1;\n            if (snapPointsOffset && newIndex !== -1 && typeof snapPointsOffset[newIndex] === \"number\") {\n                snapToPoint(snapPointsOffset[newIndex]);\n            }\n        }\n    }, [\n        activeSnapPoint,\n        activeSnapPointProp,\n        snapPoints,\n        snapPointsOffset,\n        snapToPoint\n    ]);\n    function onRelease(param) {\n        let { draggedDistance, closeDrawer, velocity, dismissible } = param;\n        if (fadeFromIndex === undefined) return;\n        const currentPosition = direction === \"bottom\" || direction === \"right\" ? (activeSnapPointOffset != null ? activeSnapPointOffset : 0) - draggedDistance : (activeSnapPointOffset != null ? activeSnapPointOffset : 0) + draggedDistance;\n        const isOverlaySnapPoint = activeSnapPointIndex === fadeFromIndex - 1;\n        const isFirst = activeSnapPointIndex === 0;\n        const hasDraggedUp = draggedDistance > 0;\n        if (isOverlaySnapPoint) {\n            set(overlayRef.current, {\n                transition: \"opacity \".concat(TRANSITIONS.DURATION, \"s cubic-bezier(\").concat(TRANSITIONS.EASE.join(\",\"), \")\")\n            });\n        }\n        if (!snapToSequentialPoint && velocity > 2 && !hasDraggedUp) {\n            if (dismissible) closeDrawer();\n            else snapToPoint(snapPointsOffset[0]); // snap to initial point\n            return;\n        }\n        if (!snapToSequentialPoint && velocity > 2 && hasDraggedUp && snapPointsOffset && snapPoints) {\n            snapToPoint(snapPointsOffset[snapPoints.length - 1]);\n            return;\n        }\n        // Find the closest snap point to the current position\n        const closestSnapPoint = snapPointsOffset == null ? void 0 : snapPointsOffset.reduce((prev, curr)=>{\n            if (typeof prev !== \"number\" || typeof curr !== \"number\") return prev;\n            return Math.abs(curr - currentPosition) < Math.abs(prev - currentPosition) ? curr : prev;\n        });\n        const dim = isVertical(direction) ? window.innerHeight : window.innerWidth;\n        if (velocity > VELOCITY_THRESHOLD && Math.abs(draggedDistance) < dim * 0.4) {\n            const dragDirection = hasDraggedUp ? 1 : -1; // 1 = up, -1 = down\n            // Don't do anything if we swipe upwards while being on the last snap point\n            if (dragDirection > 0 && isLastSnapPoint && snapPoints) {\n                snapToPoint(snapPointsOffset[snapPoints.length - 1]);\n                return;\n            }\n            if (isFirst && dragDirection < 0 && dismissible) {\n                closeDrawer();\n            }\n            if (activeSnapPointIndex === null) return;\n            snapToPoint(snapPointsOffset[activeSnapPointIndex + dragDirection]);\n            return;\n        }\n        snapToPoint(closestSnapPoint);\n    }\n    function onDrag(param) {\n        let { draggedDistance } = param;\n        if (activeSnapPointOffset === null) return;\n        const newValue = direction === \"bottom\" || direction === \"right\" ? activeSnapPointOffset - draggedDistance : activeSnapPointOffset + draggedDistance;\n        // Don't do anything if we exceed the last(biggest) snap point\n        if ((direction === \"bottom\" || direction === \"right\") && newValue < snapPointsOffset[snapPointsOffset.length - 1]) {\n            return;\n        }\n        if ((direction === \"top\" || direction === \"left\") && newValue > snapPointsOffset[snapPointsOffset.length - 1]) {\n            return;\n        }\n        set(drawerRef.current, {\n            transform: isVertical(direction) ? \"translate3d(0, \".concat(newValue, \"px, 0)\") : \"translate3d(\".concat(newValue, \"px, 0, 0)\")\n        });\n    }\n    function getPercentageDragged(absDraggedDistance, isDraggingDown) {\n        if (!snapPoints || typeof activeSnapPointIndex !== \"number\" || !snapPointsOffset || fadeFromIndex === undefined) return null;\n        // If this is true we are dragging to a snap point that is supposed to have an overlay\n        const isOverlaySnapPoint = activeSnapPointIndex === fadeFromIndex - 1;\n        const isOverlaySnapPointOrHigher = activeSnapPointIndex >= fadeFromIndex;\n        if (isOverlaySnapPointOrHigher && isDraggingDown) {\n            return 0;\n        }\n        // Don't animate, but still use this one if we are dragging away from the overlaySnapPoint\n        if (isOverlaySnapPoint && !isDraggingDown) return 1;\n        if (!shouldFade && !isOverlaySnapPoint) return null;\n        // Either fadeFrom index or the one before\n        const targetSnapPointIndex = isOverlaySnapPoint ? activeSnapPointIndex + 1 : activeSnapPointIndex - 1;\n        // Get the distance from overlaySnapPoint to the one before or vice-versa to calculate the opacity percentage accordingly\n        const snapPointDistance = isOverlaySnapPoint ? snapPointsOffset[targetSnapPointIndex] - snapPointsOffset[targetSnapPointIndex - 1] : snapPointsOffset[targetSnapPointIndex + 1] - snapPointsOffset[targetSnapPointIndex];\n        const percentageDragged = absDraggedDistance / Math.abs(snapPointDistance);\n        if (isOverlaySnapPoint) {\n            return 1 - percentageDragged;\n        } else {\n            return percentageDragged;\n        }\n    }\n    return {\n        isLastSnapPoint,\n        activeSnapPoint,\n        shouldFade,\n        getPercentageDragged,\n        setActiveSnapPoint,\n        activeSnapPointIndex,\n        onRelease,\n        onDrag,\n        snapPointsOffset\n    };\n}\n_s6(useSnapPoints, \"95PjfcnRycW4IeI7SVu/aDGpThs=\", false, function() {\n    return [\n        useControllableState\n    ];\n});\nconst noop = ()=>()=>{};\nfunction useScaleBackground() {\n    _s7();\n    const { direction, isOpen, shouldScaleBackground, setBackgroundColorOnScale, noBodyStyles } = useDrawerContext();\n    const timeoutIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const initialBackgroundColor = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>document.body.style.backgroundColor, []);\n    function getScale() {\n        return (window.innerWidth - WINDOW_TOP_OFFSET) / window.innerWidth;\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (isOpen && shouldScaleBackground) {\n            if (timeoutIdRef.current) clearTimeout(timeoutIdRef.current);\n            const wrapper = document.querySelector(\"[data-vaul-drawer-wrapper]\") || document.querySelector(\"[vaul-drawer-wrapper]\");\n            if (!wrapper) return;\n            chain(setBackgroundColorOnScale && !noBodyStyles ? assignStyle(document.body, {\n                background: \"black\"\n            }) : noop, assignStyle(wrapper, {\n                transformOrigin: isVertical(direction) ? \"top\" : \"left\",\n                transitionProperty: \"transform, border-radius\",\n                transitionDuration: \"\".concat(TRANSITIONS.DURATION, \"s\"),\n                transitionTimingFunction: \"cubic-bezier(\".concat(TRANSITIONS.EASE.join(\",\"), \")\")\n            }));\n            const wrapperStylesCleanup = assignStyle(wrapper, {\n                borderRadius: \"\".concat(BORDER_RADIUS, \"px\"),\n                overflow: \"hidden\",\n                ...isVertical(direction) ? {\n                    transform: \"scale(\".concat(getScale(), \") translate3d(0, calc(env(safe-area-inset-top) + 14px), 0)\")\n                } : {\n                    transform: \"scale(\".concat(getScale(), \") translate3d(calc(env(safe-area-inset-top) + 14px), 0, 0)\")\n                }\n            });\n            return ()=>{\n                wrapperStylesCleanup();\n                timeoutIdRef.current = window.setTimeout(()=>{\n                    if (initialBackgroundColor) {\n                        document.body.style.background = initialBackgroundColor;\n                    } else {\n                        document.body.style.removeProperty(\"background\");\n                    }\n                }, TRANSITIONS.DURATION * 1000);\n            };\n        }\n    }, [\n        isOpen,\n        shouldScaleBackground,\n        initialBackgroundColor\n    ]);\n}\n_s7(useScaleBackground, \"iD6j0xgGpAUoB+qotTzTu9Cg2FU=\", false, function() {\n    return [\n        useDrawerContext\n    ];\n});\nlet previousBodyPosition = null;\n/**\n * This hook is necessary to prevent buggy behavior on iOS devices (need to test on Android).\n * I won't get into too much detail about what bugs it solves, but so far I've found that setting the body to `position: fixed` is the most reliable way to prevent those bugs.\n * Issues that this hook solves:\n * https://github.com/emilkowalski/vaul/issues/435\n * https://github.com/emilkowalski/vaul/issues/433\n * And more that I discovered, but were just not reported.\n */ function usePositionFixed(param) {\n    let { isOpen, modal, nested, hasBeenOpened, preventScrollRestoration, noBodyStyles } = param;\n    _s8();\n    const [activeUrl, setActiveUrl] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>typeof window !== \"undefined\" ? window.location.href : \"\");\n    const scrollPos = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    const setPositionFixed = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        // All browsers on iOS will return true here.\n        if (!isSafari()) return;\n        // If previousBodyPosition is already set, don't set it again.\n        if (previousBodyPosition === null && isOpen && !noBodyStyles) {\n            previousBodyPosition = {\n                position: document.body.style.position,\n                top: document.body.style.top,\n                left: document.body.style.left,\n                height: document.body.style.height,\n                right: \"unset\"\n            };\n            // Update the dom inside an animation frame\n            const { scrollX, innerHeight } = window;\n            document.body.style.setProperty(\"position\", \"fixed\", \"important\");\n            Object.assign(document.body.style, {\n                top: \"\".concat(-scrollPos.current, \"px\"),\n                left: \"\".concat(-scrollX, \"px\"),\n                right: \"0px\",\n                height: \"auto\"\n            });\n            window.setTimeout(()=>window.requestAnimationFrame(()=>{\n                    // Attempt to check if the bottom bar appeared due to the position change\n                    const bottomBarHeight = innerHeight - window.innerHeight;\n                    if (bottomBarHeight && scrollPos.current >= innerHeight) {\n                        // Move the content further up so that the bottom bar doesn't hide it\n                        document.body.style.top = \"\".concat(-(scrollPos.current + bottomBarHeight), \"px\");\n                    }\n                }), 300);\n        }\n    }, [\n        isOpen\n    ]);\n    const restorePositionSetting = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        // All browsers on iOS will return true here.\n        if (!isSafari()) return;\n        if (previousBodyPosition !== null && !noBodyStyles) {\n            // Convert the position from \"px\" to Int\n            const y = -parseInt(document.body.style.top, 10);\n            const x = -parseInt(document.body.style.left, 10);\n            // Restore styles\n            Object.assign(document.body.style, previousBodyPosition);\n            window.requestAnimationFrame(()=>{\n                if (preventScrollRestoration && activeUrl !== window.location.href) {\n                    setActiveUrl(window.location.href);\n                    return;\n                }\n                window.scrollTo(x, y);\n            });\n            previousBodyPosition = null;\n        }\n    }, [\n        activeUrl\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        function onScroll() {\n            scrollPos.current = window.scrollY;\n        }\n        onScroll();\n        window.addEventListener(\"scroll\", onScroll);\n        return ()=>{\n            window.removeEventListener(\"scroll\", onScroll);\n        };\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!modal) return;\n        return ()=>{\n            if (typeof document === \"undefined\") return;\n            // Another drawer is opened, safe to ignore the execution\n            const hasDrawerOpened = !!document.querySelector(\"[data-vaul-drawer]\");\n            if (hasDrawerOpened) return;\n            restorePositionSetting();\n        };\n    }, [\n        modal,\n        restorePositionSetting\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (nested || !hasBeenOpened) return;\n        // This is needed to force Safari toolbar to show **before** the drawer starts animating to prevent a gnarly shift from happening\n        if (isOpen) {\n            // avoid for standalone mode (PWA)\n            const isStandalone = window.matchMedia(\"(display-mode: standalone)\").matches;\n            !isStandalone && setPositionFixed();\n            if (!modal) {\n                window.setTimeout(()=>{\n                    restorePositionSetting();\n                }, 500);\n            }\n        } else {\n            restorePositionSetting();\n        }\n    }, [\n        isOpen,\n        hasBeenOpened,\n        activeUrl,\n        modal,\n        nested,\n        setPositionFixed,\n        restorePositionSetting\n    ]);\n    return {\n        restorePositionSetting\n    };\n}\n_s8(usePositionFixed, \"zTIPLGFv24nxWK/dBplmrSBU4gg=\");\nfunction Root(param) {\n    let { open: openProp, onOpenChange, children, onDrag: onDragProp, onRelease: onReleaseProp, snapPoints, shouldScaleBackground = false, setBackgroundColorOnScale = true, closeThreshold = CLOSE_THRESHOLD, scrollLockTimeout = SCROLL_LOCK_TIMEOUT, dismissible = true, handleOnly = false, fadeFromIndex = snapPoints && snapPoints.length - 1, activeSnapPoint: activeSnapPointProp, setActiveSnapPoint: setActiveSnapPointProp, fixed, modal = true, onClose, nested, noBodyStyles = false, direction = \"bottom\", defaultOpen = false, disablePreventScroll = true, snapToSequentialPoint = false, preventScrollRestoration = false, repositionInputs = true, onAnimationEnd, container, autoFocus = false } = param;\n    _s9();\n    var _drawerRef_current, _drawerRef_current1;\n    const [isOpen = false, setIsOpen] = useControllableState({\n        defaultProp: defaultOpen,\n        prop: openProp,\n        onChange: (o)=>{\n            onOpenChange == null ? void 0 : onOpenChange(o);\n            if (!o && !nested) {\n                restorePositionSetting();\n            }\n            setTimeout(()=>{\n                onAnimationEnd == null ? void 0 : onAnimationEnd(o);\n            }, TRANSITIONS.DURATION * 1000);\n            if (o && !modal) {\n                if (typeof window !== \"undefined\") {\n                    window.requestAnimationFrame(()=>{\n                        document.body.style.pointerEvents = \"auto\";\n                    });\n                }\n            }\n            if (!o) {\n                // This will be removed when the exit animation ends (`500ms`)\n                document.body.style.pointerEvents = \"auto\";\n            }\n        }\n    });\n    const [hasBeenOpened, setHasBeenOpened] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const [isDragging, setIsDragging] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const [justReleased, setJustReleased] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const overlayRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const openTime = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const dragStartTime = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const dragEndTime = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const lastTimeDragPrevented = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const isAllowedToDrag = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const nestedOpenChangeTimer = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const pointerStart = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    const keyboardIsOpen = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const shouldAnimate = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!defaultOpen);\n    const previousDiffFromInitial = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    const drawerRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const drawerHeightRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(((_drawerRef_current = drawerRef.current) == null ? void 0 : _drawerRef_current.getBoundingClientRect().height) || 0);\n    const drawerWidthRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(((_drawerRef_current1 = drawerRef.current) == null ? void 0 : _drawerRef_current1.getBoundingClientRect().width) || 0);\n    const initialDrawerHeight = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    const onSnapPointChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((activeSnapPointIndex)=>{\n        // Change openTime ref when we reach the last snap point to prevent dragging for 500ms incase it's scrollable.\n        if (snapPoints && activeSnapPointIndex === snapPointsOffset.length - 1) openTime.current = new Date();\n    }, []);\n    const { activeSnapPoint, activeSnapPointIndex, setActiveSnapPoint, onRelease: onReleaseSnapPoints, snapPointsOffset, onDrag: onDragSnapPoints, shouldFade, getPercentageDragged: getSnapPointsPercentageDragged } = useSnapPoints({\n        snapPoints,\n        activeSnapPointProp,\n        setActiveSnapPointProp,\n        drawerRef,\n        fadeFromIndex,\n        overlayRef,\n        onSnapPointChange,\n        direction,\n        container,\n        snapToSequentialPoint\n    });\n    usePreventScroll({\n        isDisabled: !isOpen || isDragging || !modal || justReleased || !hasBeenOpened || !repositionInputs || !disablePreventScroll\n    });\n    const { restorePositionSetting } = usePositionFixed({\n        isOpen,\n        modal,\n        nested: nested != null ? nested : false,\n        hasBeenOpened,\n        preventScrollRestoration,\n        noBodyStyles\n    });\n    function getScale() {\n        return (window.innerWidth - WINDOW_TOP_OFFSET) / window.innerWidth;\n    }\n    function onPress(event) {\n        var _drawerRef_current, _drawerRef_current1;\n        if (!dismissible && !snapPoints) return;\n        if (drawerRef.current && !drawerRef.current.contains(event.target)) return;\n        drawerHeightRef.current = ((_drawerRef_current = drawerRef.current) == null ? void 0 : _drawerRef_current.getBoundingClientRect().height) || 0;\n        drawerWidthRef.current = ((_drawerRef_current1 = drawerRef.current) == null ? void 0 : _drawerRef_current1.getBoundingClientRect().width) || 0;\n        setIsDragging(true);\n        dragStartTime.current = new Date();\n        // iOS doesn't trigger mouseUp after scrolling so we need to listen to touched in order to disallow dragging\n        if (isIOS()) {\n            window.addEventListener(\"touchend\", ()=>isAllowedToDrag.current = false, {\n                once: true\n            });\n        }\n        // Ensure we maintain correct pointer capture even when going outside of the drawer\n        event.target.setPointerCapture(event.pointerId);\n        pointerStart.current = isVertical(direction) ? event.pageY : event.pageX;\n    }\n    function shouldDrag(el, isDraggingInDirection) {\n        var _window_getSelection;\n        let element = el;\n        const highlightedText = (_window_getSelection = window.getSelection()) == null ? void 0 : _window_getSelection.toString();\n        const swipeAmount = drawerRef.current ? getTranslate(drawerRef.current, direction) : null;\n        const date = new Date();\n        // Fixes https://github.com/emilkowalski/vaul/issues/483\n        if (element.tagName === \"SELECT\") {\n            return false;\n        }\n        if (element.hasAttribute(\"data-vaul-no-drag\") || element.closest(\"[data-vaul-no-drag]\")) {\n            return false;\n        }\n        if (direction === \"right\" || direction === \"left\") {\n            return true;\n        }\n        // Allow scrolling when animating\n        if (openTime.current && date.getTime() - openTime.current.getTime() < 500) {\n            return false;\n        }\n        if (swipeAmount !== null) {\n            if (direction === \"bottom\" ? swipeAmount > 0 : swipeAmount < 0) {\n                return true;\n            }\n        }\n        // Don't drag if there's highlighted text\n        if (highlightedText && highlightedText.length > 0) {\n            return false;\n        }\n        // Disallow dragging if drawer was scrolled within `scrollLockTimeout`\n        if (lastTimeDragPrevented.current && date.getTime() - lastTimeDragPrevented.current.getTime() < scrollLockTimeout && swipeAmount === 0) {\n            lastTimeDragPrevented.current = date;\n            return false;\n        }\n        if (isDraggingInDirection) {\n            lastTimeDragPrevented.current = date;\n            // We are dragging down so we should allow scrolling\n            return false;\n        }\n        // Keep climbing up the DOM tree as long as there's a parent\n        while(element){\n            // Check if the element is scrollable\n            if (element.scrollHeight > element.clientHeight) {\n                if (element.scrollTop !== 0) {\n                    lastTimeDragPrevented.current = new Date();\n                    // The element is scrollable and not scrolled to the top, so don't drag\n                    return false;\n                }\n                if (element.getAttribute(\"role\") === \"dialog\") {\n                    return true;\n                }\n            }\n            // Move up to the parent element\n            element = element.parentNode;\n        }\n        // No scrollable parents not scrolled to the top found, so drag\n        return true;\n    }\n    function onDrag(event) {\n        if (!drawerRef.current) {\n            return;\n        }\n        // We need to know how much of the drawer has been dragged in percentages so that we can transform background accordingly\n        if (isDragging) {\n            const directionMultiplier = direction === \"bottom\" || direction === \"right\" ? 1 : -1;\n            const draggedDistance = (pointerStart.current - (isVertical(direction) ? event.pageY : event.pageX)) * directionMultiplier;\n            const isDraggingInDirection = draggedDistance > 0;\n            // Pre condition for disallowing dragging in the close direction.\n            const noCloseSnapPointsPreCondition = snapPoints && !dismissible && !isDraggingInDirection;\n            // Disallow dragging down to close when first snap point is the active one and dismissible prop is set to false.\n            if (noCloseSnapPointsPreCondition && activeSnapPointIndex === 0) return;\n            // We need to capture last time when drag with scroll was triggered and have a timeout between\n            const absDraggedDistance = Math.abs(draggedDistance);\n            const wrapper = document.querySelector(\"[data-vaul-drawer-wrapper]\");\n            const drawerDimension = direction === \"bottom\" || direction === \"top\" ? drawerHeightRef.current : drawerWidthRef.current;\n            // Calculate the percentage dragged, where 1 is the closed position\n            let percentageDragged = absDraggedDistance / drawerDimension;\n            const snapPointPercentageDragged = getSnapPointsPercentageDragged(absDraggedDistance, isDraggingInDirection);\n            if (snapPointPercentageDragged !== null) {\n                percentageDragged = snapPointPercentageDragged;\n            }\n            // Disallow close dragging beyond the smallest snap point.\n            if (noCloseSnapPointsPreCondition && percentageDragged >= 1) {\n                return;\n            }\n            if (!isAllowedToDrag.current && !shouldDrag(event.target, isDraggingInDirection)) return;\n            drawerRef.current.classList.add(DRAG_CLASS);\n            // If shouldDrag gave true once after pressing down on the drawer, we set isAllowedToDrag to true and it will remain true until we let go, there's no reason to disable dragging mid way, ever, and that's the solution to it\n            isAllowedToDrag.current = true;\n            set(drawerRef.current, {\n                transition: \"none\"\n            });\n            set(overlayRef.current, {\n                transition: \"none\"\n            });\n            if (snapPoints) {\n                onDragSnapPoints({\n                    draggedDistance\n                });\n            }\n            // Run this only if snapPoints are not defined or if we are at the last snap point (highest one)\n            if (isDraggingInDirection && !snapPoints) {\n                const dampenedDraggedDistance = dampenValue(draggedDistance);\n                const translateValue = Math.min(dampenedDraggedDistance * -1, 0) * directionMultiplier;\n                set(drawerRef.current, {\n                    transform: isVertical(direction) ? \"translate3d(0, \".concat(translateValue, \"px, 0)\") : \"translate3d(\".concat(translateValue, \"px, 0, 0)\")\n                });\n                return;\n            }\n            const opacityValue = 1 - percentageDragged;\n            if (shouldFade || fadeFromIndex && activeSnapPointIndex === fadeFromIndex - 1) {\n                onDragProp == null ? void 0 : onDragProp(event, percentageDragged);\n                set(overlayRef.current, {\n                    opacity: \"\".concat(opacityValue),\n                    transition: \"none\"\n                }, true);\n            }\n            if (wrapper && overlayRef.current && shouldScaleBackground) {\n                // Calculate percentageDragged as a fraction (0 to 1)\n                const scaleValue = Math.min(getScale() + percentageDragged * (1 - getScale()), 1);\n                const borderRadiusValue = 8 - percentageDragged * 8;\n                const translateValue = Math.max(0, 14 - percentageDragged * 14);\n                set(wrapper, {\n                    borderRadius: \"\".concat(borderRadiusValue, \"px\"),\n                    transform: isVertical(direction) ? \"scale(\".concat(scaleValue, \") translate3d(0, \").concat(translateValue, \"px, 0)\") : \"scale(\".concat(scaleValue, \") translate3d(\").concat(translateValue, \"px, 0, 0)\"),\n                    transition: \"none\"\n                }, true);\n            }\n            if (!snapPoints) {\n                const translateValue = absDraggedDistance * directionMultiplier;\n                set(drawerRef.current, {\n                    transform: isVertical(direction) ? \"translate3d(0, \".concat(translateValue, \"px, 0)\") : \"translate3d(\".concat(translateValue, \"px, 0, 0)\")\n                });\n            }\n        }\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        window.requestAnimationFrame(()=>{\n            shouldAnimate.current = true;\n        });\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _window_visualViewport;\n        function onVisualViewportChange() {\n            if (!drawerRef.current || !repositionInputs) return;\n            const focusedElement = document.activeElement;\n            if (isInput(focusedElement) || keyboardIsOpen.current) {\n                var _window_visualViewport;\n                const visualViewportHeight = ((_window_visualViewport = window.visualViewport) == null ? void 0 : _window_visualViewport.height) || 0;\n                const totalHeight = window.innerHeight;\n                // This is the height of the keyboard\n                let diffFromInitial = totalHeight - visualViewportHeight;\n                const drawerHeight = drawerRef.current.getBoundingClientRect().height || 0;\n                // Adjust drawer height only if it's tall enough\n                const isTallEnough = drawerHeight > totalHeight * 0.8;\n                if (!initialDrawerHeight.current) {\n                    initialDrawerHeight.current = drawerHeight;\n                }\n                const offsetFromTop = drawerRef.current.getBoundingClientRect().top;\n                // visualViewport height may change due to somq e subtle changes to the keyboard. Checking if the height changed by 60 or more will make sure that they keyboard really changed its open state.\n                if (Math.abs(previousDiffFromInitial.current - diffFromInitial) > 60) {\n                    keyboardIsOpen.current = !keyboardIsOpen.current;\n                }\n                if (snapPoints && snapPoints.length > 0 && snapPointsOffset && activeSnapPointIndex) {\n                    const activeSnapPointHeight = snapPointsOffset[activeSnapPointIndex] || 0;\n                    diffFromInitial += activeSnapPointHeight;\n                }\n                previousDiffFromInitial.current = diffFromInitial;\n                // We don't have to change the height if the input is in view, when we are here we are in the opened keyboard state so we can correctly check if the input is in view\n                if (drawerHeight > visualViewportHeight || keyboardIsOpen.current) {\n                    const height = drawerRef.current.getBoundingClientRect().height;\n                    let newDrawerHeight = height;\n                    if (height > visualViewportHeight) {\n                        newDrawerHeight = visualViewportHeight - (isTallEnough ? offsetFromTop : WINDOW_TOP_OFFSET);\n                    }\n                    // When fixed, don't move the drawer upwards if there's space, but rather only change it's height so it's fully scrollable when the keyboard is open\n                    if (fixed) {\n                        drawerRef.current.style.height = \"\".concat(height - Math.max(diffFromInitial, 0), \"px\");\n                    } else {\n                        drawerRef.current.style.height = \"\".concat(Math.max(newDrawerHeight, visualViewportHeight - offsetFromTop), \"px\");\n                    }\n                } else if (!isMobileFirefox()) {\n                    drawerRef.current.style.height = \"\".concat(initialDrawerHeight.current, \"px\");\n                }\n                if (snapPoints && snapPoints.length > 0 && !keyboardIsOpen.current) {\n                    drawerRef.current.style.bottom = \"0px\";\n                } else {\n                    // Negative bottom value would never make sense\n                    drawerRef.current.style.bottom = \"\".concat(Math.max(diffFromInitial, 0), \"px\");\n                }\n            }\n        }\n        (_window_visualViewport = window.visualViewport) == null ? void 0 : _window_visualViewport.addEventListener(\"resize\", onVisualViewportChange);\n        return ()=>{\n            var _window_visualViewport;\n            return (_window_visualViewport = window.visualViewport) == null ? void 0 : _window_visualViewport.removeEventListener(\"resize\", onVisualViewportChange);\n        };\n    }, [\n        activeSnapPointIndex,\n        snapPoints,\n        snapPointsOffset\n    ]);\n    function closeDrawer(fromWithin) {\n        cancelDrag();\n        onClose == null ? void 0 : onClose();\n        if (!fromWithin) {\n            setIsOpen(false);\n        }\n        setTimeout(()=>{\n            if (snapPoints) {\n                setActiveSnapPoint(snapPoints[0]);\n            }\n        }, TRANSITIONS.DURATION * 1000); // seconds to ms\n    }\n    function resetDrawer() {\n        if (!drawerRef.current) return;\n        const wrapper = document.querySelector(\"[data-vaul-drawer-wrapper]\");\n        const currentSwipeAmount = getTranslate(drawerRef.current, direction);\n        set(drawerRef.current, {\n            transform: \"translate3d(0, 0, 0)\",\n            transition: \"transform \".concat(TRANSITIONS.DURATION, \"s cubic-bezier(\").concat(TRANSITIONS.EASE.join(\",\"), \")\")\n        });\n        set(overlayRef.current, {\n            transition: \"opacity \".concat(TRANSITIONS.DURATION, \"s cubic-bezier(\").concat(TRANSITIONS.EASE.join(\",\"), \")\"),\n            opacity: \"1\"\n        });\n        // Don't reset background if swiped upwards\n        if (shouldScaleBackground && currentSwipeAmount && currentSwipeAmount > 0 && isOpen) {\n            set(wrapper, {\n                borderRadius: \"\".concat(BORDER_RADIUS, \"px\"),\n                overflow: \"hidden\",\n                ...isVertical(direction) ? {\n                    transform: \"scale(\".concat(getScale(), \") translate3d(0, calc(env(safe-area-inset-top) + 14px), 0)\"),\n                    transformOrigin: \"top\"\n                } : {\n                    transform: \"scale(\".concat(getScale(), \") translate3d(calc(env(safe-area-inset-top) + 14px), 0, 0)\"),\n                    transformOrigin: \"left\"\n                },\n                transitionProperty: \"transform, border-radius\",\n                transitionDuration: \"\".concat(TRANSITIONS.DURATION, \"s\"),\n                transitionTimingFunction: \"cubic-bezier(\".concat(TRANSITIONS.EASE.join(\",\"), \")\")\n            }, true);\n        }\n    }\n    function cancelDrag() {\n        if (!isDragging || !drawerRef.current) return;\n        drawerRef.current.classList.remove(DRAG_CLASS);\n        isAllowedToDrag.current = false;\n        setIsDragging(false);\n        dragEndTime.current = new Date();\n    }\n    function onRelease(event) {\n        if (!isDragging || !drawerRef.current) return;\n        drawerRef.current.classList.remove(DRAG_CLASS);\n        isAllowedToDrag.current = false;\n        setIsDragging(false);\n        dragEndTime.current = new Date();\n        const swipeAmount = getTranslate(drawerRef.current, direction);\n        if (!event || !shouldDrag(event.target, false) || !swipeAmount || Number.isNaN(swipeAmount)) return;\n        if (dragStartTime.current === null) return;\n        const timeTaken = dragEndTime.current.getTime() - dragStartTime.current.getTime();\n        const distMoved = pointerStart.current - (isVertical(direction) ? event.pageY : event.pageX);\n        const velocity = Math.abs(distMoved) / timeTaken;\n        if (velocity > 0.05) {\n            // `justReleased` is needed to prevent the drawer from focusing on an input when the drag ends, as it's not the intent most of the time.\n            setJustReleased(true);\n            setTimeout(()=>{\n                setJustReleased(false);\n            }, 200);\n        }\n        if (snapPoints) {\n            const directionMultiplier = direction === \"bottom\" || direction === \"right\" ? 1 : -1;\n            onReleaseSnapPoints({\n                draggedDistance: distMoved * directionMultiplier,\n                closeDrawer,\n                velocity,\n                dismissible\n            });\n            onReleaseProp == null ? void 0 : onReleaseProp(event, true);\n            return;\n        }\n        // Moved upwards, don't do anything\n        if (direction === \"bottom\" || direction === \"right\" ? distMoved > 0 : distMoved < 0) {\n            resetDrawer();\n            onReleaseProp == null ? void 0 : onReleaseProp(event, true);\n            return;\n        }\n        if (velocity > VELOCITY_THRESHOLD) {\n            closeDrawer();\n            onReleaseProp == null ? void 0 : onReleaseProp(event, false);\n            return;\n        }\n        var _drawerRef_current_getBoundingClientRect_height;\n        const visibleDrawerHeight = Math.min((_drawerRef_current_getBoundingClientRect_height = drawerRef.current.getBoundingClientRect().height) != null ? _drawerRef_current_getBoundingClientRect_height : 0, window.innerHeight);\n        var _drawerRef_current_getBoundingClientRect_width;\n        const visibleDrawerWidth = Math.min((_drawerRef_current_getBoundingClientRect_width = drawerRef.current.getBoundingClientRect().width) != null ? _drawerRef_current_getBoundingClientRect_width : 0, window.innerWidth);\n        const isHorizontalSwipe = direction === \"left\" || direction === \"right\";\n        if (Math.abs(swipeAmount) >= (isHorizontalSwipe ? visibleDrawerWidth : visibleDrawerHeight) * closeThreshold) {\n            closeDrawer();\n            onReleaseProp == null ? void 0 : onReleaseProp(event, false);\n            return;\n        }\n        onReleaseProp == null ? void 0 : onReleaseProp(event, true);\n        resetDrawer();\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        // Trigger enter animation without using CSS animation\n        if (isOpen) {\n            set(document.documentElement, {\n                scrollBehavior: \"auto\"\n            });\n            openTime.current = new Date();\n        }\n        return ()=>{\n            reset(document.documentElement, \"scrollBehavior\");\n        };\n    }, [\n        isOpen\n    ]);\n    function onNestedOpenChange(o) {\n        const scale = o ? (window.innerWidth - NESTED_DISPLACEMENT) / window.innerWidth : 1;\n        const y = o ? -NESTED_DISPLACEMENT : 0;\n        if (nestedOpenChangeTimer.current) {\n            window.clearTimeout(nestedOpenChangeTimer.current);\n        }\n        set(drawerRef.current, {\n            transition: \"transform \".concat(TRANSITIONS.DURATION, \"s cubic-bezier(\").concat(TRANSITIONS.EASE.join(\",\"), \")\"),\n            transform: \"scale(\".concat(scale, \") translate3d(0, \").concat(y, \"px, 0)\")\n        });\n        if (!o && drawerRef.current) {\n            nestedOpenChangeTimer.current = setTimeout(()=>{\n                const translateValue = getTranslate(drawerRef.current, direction);\n                set(drawerRef.current, {\n                    transition: \"none\",\n                    transform: isVertical(direction) ? \"translate3d(0, \".concat(translateValue, \"px, 0)\") : \"translate3d(\".concat(translateValue, \"px, 0, 0)\")\n                });\n            }, 500);\n        }\n    }\n    function onNestedDrag(_event, percentageDragged) {\n        if (percentageDragged < 0) return;\n        const initialScale = (window.innerWidth - NESTED_DISPLACEMENT) / window.innerWidth;\n        const newScale = initialScale + percentageDragged * (1 - initialScale);\n        const newTranslate = -NESTED_DISPLACEMENT + percentageDragged * NESTED_DISPLACEMENT;\n        set(drawerRef.current, {\n            transform: isVertical(direction) ? \"scale(\".concat(newScale, \") translate3d(0, \").concat(newTranslate, \"px, 0)\") : \"scale(\".concat(newScale, \") translate3d(\").concat(newTranslate, \"px, 0, 0)\"),\n            transition: \"none\"\n        });\n    }\n    function onNestedRelease(_event, o) {\n        const dim = isVertical(direction) ? window.innerHeight : window.innerWidth;\n        const scale = o ? (dim - NESTED_DISPLACEMENT) / dim : 1;\n        const translate = o ? -NESTED_DISPLACEMENT : 0;\n        if (o) {\n            set(drawerRef.current, {\n                transition: \"transform \".concat(TRANSITIONS.DURATION, \"s cubic-bezier(\").concat(TRANSITIONS.EASE.join(\",\"), \")\"),\n                transform: isVertical(direction) ? \"scale(\".concat(scale, \") translate3d(0, \").concat(translate, \"px, 0)\") : \"scale(\".concat(scale, \") translate3d(\").concat(translate, \"px, 0, 0)\")\n            });\n        }\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!modal) {\n            // Need to do this manually unfortunately\n            window.requestAnimationFrame(()=>{\n                document.body.style.pointerEvents = \"auto\";\n            });\n        }\n    }, [\n        modal\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Root, {\n        defaultOpen: defaultOpen,\n        onOpenChange: (open)=>{\n            if (!dismissible && !open) return;\n            if (open) {\n                setHasBeenOpened(true);\n            } else {\n                closeDrawer(true);\n            }\n            setIsOpen(open);\n        },\n        open: isOpen\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DrawerContext.Provider, {\n        value: {\n            activeSnapPoint,\n            snapPoints,\n            setActiveSnapPoint,\n            drawerRef,\n            overlayRef,\n            onOpenChange,\n            onPress,\n            onRelease,\n            onDrag,\n            dismissible,\n            shouldAnimate,\n            handleOnly,\n            isOpen,\n            isDragging,\n            shouldFade,\n            closeDrawer,\n            onNestedDrag,\n            onNestedOpenChange,\n            onNestedRelease,\n            keyboardIsOpen,\n            modal,\n            snapPointsOffset,\n            activeSnapPointIndex,\n            direction,\n            shouldScaleBackground,\n            setBackgroundColorOnScale,\n            noBodyStyles,\n            container,\n            autoFocus\n        }\n    }, children));\n}\n_s9(Root, \"8gf2lX0A+f+qpS4gKOo/EFwTgi0=\", false, function() {\n    return [\n        useControllableState,\n        useSnapPoints,\n        usePreventScroll,\n        usePositionFixed\n    ];\n});\n_c = Root;\nconst Overlay = /*#__PURE__*/ _s10(react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(_c1 = _s10(function(param, ref) {\n    let { ...rest } = param;\n    _s10();\n    const { overlayRef, snapPoints, onRelease, shouldFade, isOpen, modal, shouldAnimate } = useDrawerContext();\n    const composedRef = useComposedRefs(ref, overlayRef);\n    const hasSnapPoints = snapPoints && snapPoints.length > 0;\n    // Overlay is the component that is locking scroll, removing it will unlock the scroll without having to dig into Radix's Dialog library\n    if (!modal) {\n        return null;\n    }\n    const onMouseUp = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((event)=>onRelease(event), [\n        onRelease\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Overlay, {\n        onMouseUp: onMouseUp,\n        ref: composedRef,\n        \"data-vaul-overlay\": \"\",\n        \"data-vaul-snap-points\": isOpen && hasSnapPoints ? \"true\" : \"false\",\n        \"data-vaul-snap-points-overlay\": isOpen && shouldFade ? \"true\" : \"false\",\n        \"data-vaul-animate\": (shouldAnimate == null ? void 0 : shouldAnimate.current) ? \"true\" : \"false\",\n        ...rest\n    });\n}, \"mo9crHkIOoa2MURq4gd+ydfXBk0=\", false, function() {\n    return [\n        useDrawerContext,\n        useComposedRefs\n    ];\n})), \"mo9crHkIOoa2MURq4gd+ydfXBk0=\", false, function() {\n    return [\n        useDrawerContext,\n        useComposedRefs\n    ];\n});\n_c2 = Overlay;\nOverlay.displayName = \"Drawer.Overlay\";\nconst Content = /*#__PURE__*/ _s11(react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(_c3 = _s11(function(param, ref) {\n    let { onPointerDownOutside, style, onOpenAutoFocus, ...rest } = param;\n    _s11();\n    const { drawerRef, onPress, onRelease, onDrag, keyboardIsOpen, snapPointsOffset, activeSnapPointIndex, modal, isOpen, direction, snapPoints, container, handleOnly, shouldAnimate, autoFocus } = useDrawerContext();\n    // Needed to use transition instead of animations\n    const [delayedSnapPoints, setDelayedSnapPoints] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const composedRef = useComposedRefs(ref, drawerRef);\n    const pointerStartRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const lastKnownPointerEventRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const wasBeyondThePointRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const hasSnapPoints = snapPoints && snapPoints.length > 0;\n    useScaleBackground();\n    const isDeltaInDirection = function(delta, direction) {\n        let threshold = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        if (wasBeyondThePointRef.current) return true;\n        const deltaY = Math.abs(delta.y);\n        const deltaX = Math.abs(delta.x);\n        const isDeltaX = deltaX > deltaY;\n        const dFactor = [\n            \"bottom\",\n            \"right\"\n        ].includes(direction) ? 1 : -1;\n        if (direction === \"left\" || direction === \"right\") {\n            const isReverseDirection = delta.x * dFactor < 0;\n            if (!isReverseDirection && deltaX >= 0 && deltaX <= threshold) {\n                return isDeltaX;\n            }\n        } else {\n            const isReverseDirection = delta.y * dFactor < 0;\n            if (!isReverseDirection && deltaY >= 0 && deltaY <= threshold) {\n                return !isDeltaX;\n            }\n        }\n        wasBeyondThePointRef.current = true;\n        return true;\n    };\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (hasSnapPoints) {\n            window.requestAnimationFrame(()=>{\n                setDelayedSnapPoints(true);\n            });\n        }\n    }, []);\n    function handleOnPointerUp(event) {\n        pointerStartRef.current = null;\n        wasBeyondThePointRef.current = false;\n        onRelease(event);\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Content, {\n        \"data-vaul-drawer-direction\": direction,\n        \"data-vaul-drawer\": \"\",\n        \"data-vaul-delayed-snap-points\": delayedSnapPoints ? \"true\" : \"false\",\n        \"data-vaul-snap-points\": isOpen && hasSnapPoints ? \"true\" : \"false\",\n        \"data-vaul-custom-container\": container ? \"true\" : \"false\",\n        \"data-vaul-animate\": (shouldAnimate == null ? void 0 : shouldAnimate.current) ? \"true\" : \"false\",\n        ...rest,\n        ref: composedRef,\n        style: snapPointsOffset && snapPointsOffset.length > 0 ? {\n            \"--snap-point-height\": \"\".concat(snapPointsOffset[activeSnapPointIndex != null ? activeSnapPointIndex : 0], \"px\"),\n            ...style\n        } : style,\n        onPointerDown: (event)=>{\n            if (handleOnly) return;\n            rest.onPointerDown == null ? void 0 : rest.onPointerDown.call(rest, event);\n            pointerStartRef.current = {\n                x: event.pageX,\n                y: event.pageY\n            };\n            onPress(event);\n        },\n        onOpenAutoFocus: (e)=>{\n            onOpenAutoFocus == null ? void 0 : onOpenAutoFocus(e);\n            if (!autoFocus) {\n                e.preventDefault();\n            }\n        },\n        onPointerDownOutside: (e)=>{\n            onPointerDownOutside == null ? void 0 : onPointerDownOutside(e);\n            if (!modal || e.defaultPrevented) {\n                e.preventDefault();\n                return;\n            }\n            if (keyboardIsOpen.current) {\n                keyboardIsOpen.current = false;\n            }\n        },\n        onFocusOutside: (e)=>{\n            if (!modal) {\n                e.preventDefault();\n                return;\n            }\n        },\n        onPointerMove: (event)=>{\n            lastKnownPointerEventRef.current = event;\n            if (handleOnly) return;\n            rest.onPointerMove == null ? void 0 : rest.onPointerMove.call(rest, event);\n            if (!pointerStartRef.current) return;\n            const yPosition = event.pageY - pointerStartRef.current.y;\n            const xPosition = event.pageX - pointerStartRef.current.x;\n            const swipeStartThreshold = event.pointerType === \"touch\" ? 10 : 2;\n            const delta = {\n                x: xPosition,\n                y: yPosition\n            };\n            const isAllowedToSwipe = isDeltaInDirection(delta, direction, swipeStartThreshold);\n            if (isAllowedToSwipe) onDrag(event);\n            else if (Math.abs(xPosition) > swipeStartThreshold || Math.abs(yPosition) > swipeStartThreshold) {\n                pointerStartRef.current = null;\n            }\n        },\n        onPointerUp: (event)=>{\n            rest.onPointerUp == null ? void 0 : rest.onPointerUp.call(rest, event);\n            pointerStartRef.current = null;\n            wasBeyondThePointRef.current = false;\n            onRelease(event);\n        },\n        onPointerOut: (event)=>{\n            rest.onPointerOut == null ? void 0 : rest.onPointerOut.call(rest, event);\n            handleOnPointerUp(lastKnownPointerEventRef.current);\n        },\n        onContextMenu: (event)=>{\n            rest.onContextMenu == null ? void 0 : rest.onContextMenu.call(rest, event);\n            if (lastKnownPointerEventRef.current) {\n                handleOnPointerUp(lastKnownPointerEventRef.current);\n            }\n        }\n    });\n}, \"GxAAlkb0WiIIzsGddkkX1iox49U=\", false, function() {\n    return [\n        useDrawerContext,\n        useComposedRefs,\n        useScaleBackground\n    ];\n})), \"GxAAlkb0WiIIzsGddkkX1iox49U=\", false, function() {\n    return [\n        useDrawerContext,\n        useComposedRefs,\n        useScaleBackground\n    ];\n});\n_c4 = Content;\nContent.displayName = \"Drawer.Content\";\nconst LONG_HANDLE_PRESS_TIMEOUT = 250;\nconst DOUBLE_TAP_TIMEOUT = 120;\nconst Handle = /*#__PURE__*/ _s12(react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(_c5 = _s12(function(param, ref) {\n    let { preventCycle = false, children, ...rest } = param;\n    _s12();\n    const { closeDrawer, isDragging, snapPoints, activeSnapPoint, setActiveSnapPoint, dismissible, handleOnly, isOpen, onPress, onDrag } = useDrawerContext();\n    const closeTimeoutIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const shouldCancelInteractionRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    function handleStartCycle() {\n        // Stop if this is the second click of a double click\n        if (shouldCancelInteractionRef.current) {\n            handleCancelInteraction();\n            return;\n        }\n        window.setTimeout(()=>{\n            handleCycleSnapPoints();\n        }, DOUBLE_TAP_TIMEOUT);\n    }\n    function handleCycleSnapPoints() {\n        // Prevent accidental taps while resizing drawer\n        if (isDragging || preventCycle || shouldCancelInteractionRef.current) {\n            handleCancelInteraction();\n            return;\n        }\n        // Make sure to clear the timeout id if the user releases the handle before the cancel timeout\n        handleCancelInteraction();\n        if (!snapPoints || snapPoints.length === 0) {\n            if (!dismissible) {\n                closeDrawer();\n            }\n            return;\n        }\n        const isLastSnapPoint = activeSnapPoint === snapPoints[snapPoints.length - 1];\n        if (isLastSnapPoint && dismissible) {\n            closeDrawer();\n            return;\n        }\n        const currentSnapIndex = snapPoints.findIndex((point)=>point === activeSnapPoint);\n        if (currentSnapIndex === -1) return; // activeSnapPoint not found in snapPoints\n        const nextSnapPoint = snapPoints[currentSnapIndex + 1];\n        setActiveSnapPoint(nextSnapPoint);\n    }\n    function handleStartInteraction() {\n        closeTimeoutIdRef.current = window.setTimeout(()=>{\n            // Cancel click interaction on a long press\n            shouldCancelInteractionRef.current = true;\n        }, LONG_HANDLE_PRESS_TIMEOUT);\n    }\n    function handleCancelInteraction() {\n        if (closeTimeoutIdRef.current) {\n            window.clearTimeout(closeTimeoutIdRef.current);\n        }\n        shouldCancelInteractionRef.current = false;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        onClick: handleStartCycle,\n        onPointerCancel: handleCancelInteraction,\n        onPointerDown: (e)=>{\n            if (handleOnly) onPress(e);\n            handleStartInteraction();\n        },\n        onPointerMove: (e)=>{\n            if (handleOnly) onDrag(e);\n        },\n        // onPointerUp is already handled by the content component\n        ref: ref,\n        \"data-vaul-drawer-visible\": isOpen ? \"true\" : \"false\",\n        \"data-vaul-handle\": \"\",\n        \"aria-hidden\": \"true\",\n        ...rest\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        \"data-vaul-handle-hitarea\": \"\",\n        \"aria-hidden\": \"true\"\n    }, children));\n}, \"NtkFnslp21sASVNYhHGMD/YLelk=\", false, function() {\n    return [\n        useDrawerContext\n    ];\n})), \"NtkFnslp21sASVNYhHGMD/YLelk=\", false, function() {\n    return [\n        useDrawerContext\n    ];\n});\n_c6 = Handle;\nHandle.displayName = \"Drawer.Handle\";\nfunction NestedRoot(param) {\n    let { onDrag, onOpenChange, ...rest } = param;\n    _s13();\n    const { onNestedDrag, onNestedOpenChange, onNestedRelease } = useDrawerContext();\n    if (!onNestedDrag) {\n        throw new Error(\"Drawer.NestedRoot must be placed in another drawer\");\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root, {\n        nested: true,\n        onClose: ()=>{\n            onNestedOpenChange(false);\n        },\n        onDrag: (e, p)=>{\n            onNestedDrag(e, p);\n            onDrag == null ? void 0 : onDrag(e, p);\n        },\n        onOpenChange: (o)=>{\n            if (o) {\n                onNestedOpenChange(o);\n            }\n        },\n        onRelease: onNestedRelease,\n        ...rest\n    });\n}\n_s13(NestedRoot, \"BbwGJZo2eqU7oL/7pG0Z2xNjKLk=\", false, function() {\n    return [\n        useDrawerContext\n    ];\n});\n_c7 = NestedRoot;\nfunction Portal(props) {\n    _s14();\n    const context = useDrawerContext();\n    const { container = context.container, ...portalProps } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Portal, {\n        container: container,\n        ...portalProps\n    });\n}\n_s14(Portal, \"zaRIsdk9S/0puIG/0m0d89LzREo=\", false, function() {\n    return [\n        useDrawerContext\n    ];\n});\n_c8 = Portal;\nconst Drawer = {\n    Root,\n    NestedRoot,\n    Content,\n    Overlay,\n    Trigger: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Trigger,\n    Portal,\n    Handle,\n    Close: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Close,\n    Title: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Title,\n    Description: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Description\n};\n\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"Root\");\n$RefreshReg$(_c1, \"Overlay$React__default.forwardRef\");\n$RefreshReg$(_c2, \"Overlay\");\n$RefreshReg$(_c3, \"Content$React__default.forwardRef\");\n$RefreshReg$(_c4, \"Content\");\n$RefreshReg$(_c5, \"Handle$React__default.forwardRef\");\n$RefreshReg$(_c6, \"Handle\");\n$RefreshReg$(_c7, \"NestedRoot\");\n$RefreshReg$(_c8, \"Portal\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/vaul/dist/index.mjs\n"));

/***/ })

});